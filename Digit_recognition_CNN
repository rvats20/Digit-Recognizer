{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2ff72169",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-12-14T11:13:59.932143Z",
     "iopub.status.busy": "2024-12-14T11:13:59.931592Z",
     "iopub.status.idle": "2024-12-14T11:14:00.599750Z",
     "shell.execute_reply": "2024-12-14T11:14:00.598730Z"
    },
    "papermill": {
     "duration": 0.67642,
     "end_time": "2024-12-14T11:14:00.601505",
     "exception": false,
     "start_time": "2024-12-14T11:13:59.925085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/digit-recognizer/sample_submission.csv\n",
      "/kaggle/input/digit-recognizer/train.csv\n",
      "/kaggle/input/digit-recognizer/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ff0d8b2",
   "metadata": {
    "papermill": {
     "duration": 0.004551,
     "end_time": "2024-12-14T11:14:00.612310",
     "exception": false,
     "start_time": "2024-12-14T11:14:00.607759",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Import dependancies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a023e717",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:00.623261Z",
     "iopub.status.busy": "2024-12-14T11:14:00.622390Z",
     "iopub.status.idle": "2024-12-14T11:14:01.938019Z",
     "shell.execute_reply": "2024-12-14T11:14:01.937220Z"
    },
    "papermill": {
     "duration": 1.323628,
     "end_time": "2024-12-14T11:14:01.940669",
     "exception": false,
     "start_time": "2024-12-14T11:14:00.617041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4f10a097",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:01.960360Z",
     "iopub.status.busy": "2024-12-14T11:14:01.960031Z",
     "iopub.status.idle": "2024-12-14T11:14:12.757055Z",
     "shell.execute_reply": "2024-12-14T11:14:12.756093Z"
    },
    "papermill": {
     "duration": 10.809012,
     "end_time": "2024-12-14T11:14:12.759205",
     "exception": false,
     "start_time": "2024-12-14T11:14:01.950193",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67933935",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:12.771908Z",
     "iopub.status.busy": "2024-12-14T11:14:12.770745Z",
     "iopub.status.idle": "2024-12-14T11:14:12.775486Z",
     "shell.execute_reply": "2024-12-14T11:14:12.774498Z"
    },
    "papermill": {
     "duration": 0.012879,
     "end_time": "2024-12-14T11:14:12.777360",
     "exception": false,
     "start_time": "2024-12-14T11:14:12.764481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c50dc6d",
   "metadata": {
    "papermill": {
     "duration": 0.004904,
     "end_time": "2024-12-14T11:14:12.787446",
     "exception": false,
     "start_time": "2024-12-14T11:14:12.782542",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Import dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3a6105a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:12.798469Z",
     "iopub.status.busy": "2024-12-14T11:14:12.798229Z",
     "iopub.status.idle": "2024-12-14T11:14:16.990790Z",
     "shell.execute_reply": "2024-12-14T11:14:16.990083Z"
    },
    "papermill": {
     "duration": 4.200276,
     "end_time": "2024-12-14T11:14:16.992835",
     "exception": false,
     "start_time": "2024-12-14T11:14:12.792559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train= pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n",
    "test= pd.read_csv('/kaggle/input/digit-recognizer/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a77f8464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.004304Z",
     "iopub.status.busy": "2024-12-14T11:14:17.003577Z",
     "iopub.status.idle": "2024-12-14T11:14:17.022424Z",
     "shell.execute_reply": "2024-12-14T11:14:17.021704Z"
    },
    "papermill": {
     "duration": 0.026144,
     "end_time": "2024-12-14T11:14:17.024121",
     "exception": false,
     "start_time": "2024-12-14T11:14:16.997977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed58d710",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.035427Z",
     "iopub.status.busy": "2024-12-14T11:14:17.035187Z",
     "iopub.status.idle": "2024-12-14T11:14:17.046947Z",
     "shell.execute_reply": "2024-12-14T11:14:17.046154Z"
    },
    "papermill": {
     "duration": 0.019166,
     "end_time": "2024-12-14T11:14:17.048469",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.029303",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41996</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41997</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41998</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41999</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "41995      0       0       0       0       0       0       0       0       0   \n",
       "41996      1       0       0       0       0       0       0       0       0   \n",
       "41997      7       0       0       0       0       0       0       0       0   \n",
       "41998      6       0       0       0       0       0       0       0       0   \n",
       "41999      9       0       0       0       0       0       0       0       0   \n",
       "\n",
       "       pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
       "41995       0  ...         0         0         0         0         0   \n",
       "41996       0  ...         0         0         0         0         0   \n",
       "41997       0  ...         0         0         0         0         0   \n",
       "41998       0  ...         0         0         0         0         0   \n",
       "41999       0  ...         0         0         0         0         0   \n",
       "\n",
       "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
       "41995         0         0         0         0         0  \n",
       "41996         0         0         0         0         0  \n",
       "41997         0         0         0         0         0  \n",
       "41998         0         0         0         0         0  \n",
       "41999         0         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "78e8abcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.060039Z",
     "iopub.status.busy": "2024-12-14T11:14:17.059551Z",
     "iopub.status.idle": "2024-12-14T11:14:17.071902Z",
     "shell.execute_reply": "2024-12-14T11:14:17.071114Z"
    },
    "papermill": {
     "duration": 0.019925,
     "end_time": "2024-12-14T11:14:17.073478",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.053553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
       "0       0       0       0       0       0       0       0       0       0   \n",
       "1       0       0       0       0       0       0       0       0       0   \n",
       "2       0       0       0       0       0       0       0       0       0   \n",
       "3       0       0       0       0       0       0       0       0       0   \n",
       "4       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 784 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9a602e43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.085124Z",
     "iopub.status.busy": "2024-12-14T11:14:17.084901Z",
     "iopub.status.idle": "2024-12-14T11:14:17.096416Z",
     "shell.execute_reply": "2024-12-14T11:14:17.095621Z"
    },
    "papermill": {
     "duration": 0.019034,
     "end_time": "2024-12-14T11:14:17.098035",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.079001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27996</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27997</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  \\\n",
       "27995       0       0       0       0       0       0       0       0       0   \n",
       "27996       0       0       0       0       0       0       0       0       0   \n",
       "27997       0       0       0       0       0       0       0       0       0   \n",
       "27998       0       0       0       0       0       0       0       0       0   \n",
       "27999       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "       pixel9  ...  pixel774  pixel775  pixel776  pixel777  pixel778  \\\n",
       "27995       0  ...         0         0         0         0         0   \n",
       "27996       0  ...         0         0         0         0         0   \n",
       "27997       0  ...         0         0         0         0         0   \n",
       "27998       0  ...         0         0         0         0         0   \n",
       "27999       0  ...         0         0         0         0         0   \n",
       "\n",
       "       pixel779  pixel780  pixel781  pixel782  pixel783  \n",
       "27995         0         0         0         0         0  \n",
       "27996         0         0         0         0         0  \n",
       "27997         0         0         0         0         0  \n",
       "27998         0         0         0         0         0  \n",
       "27999         0         0         0         0         0  \n",
       "\n",
       "[5 rows x 784 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a8c8566b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.110431Z",
     "iopub.status.busy": "2024-12-14T11:14:17.110223Z",
     "iopub.status.idle": "2024-12-14T11:14:17.145233Z",
     "shell.execute_reply": "2024-12-14T11:14:17.144308Z"
    },
    "papermill": {
     "duration": 0.043143,
     "end_time": "2024-12-14T11:14:17.146811",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.103668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 42000 entries, 0 to 41999\n",
      "Columns: 785 entries, label to pixel783\n",
      "dtypes: int64(785)\n",
      "memory usage: 251.5 MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c7bbe3e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.159574Z",
     "iopub.status.busy": "2024-12-14T11:14:17.158854Z",
     "iopub.status.idle": "2024-12-14T11:14:17.182463Z",
     "shell.execute_reply": "2024-12-14T11:14:17.181679Z"
    },
    "papermill": {
     "duration": 0.031534,
     "end_time": "2024-12-14T11:14:17.184047",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.152513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 28000 entries, 0 to 27999\n",
      "Columns: 784 entries, pixel0 to pixel783\n",
      "dtypes: int64(784)\n",
      "memory usage: 167.5 MB\n"
     ]
    }
   ],
   "source": [
    "test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "aad985b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:17.196609Z",
     "iopub.status.busy": "2024-12-14T11:14:17.196370Z",
     "iopub.status.idle": "2024-12-14T11:14:18.938286Z",
     "shell.execute_reply": "2024-12-14T11:14:18.937496Z"
    },
    "papermill": {
     "duration": 1.750192,
     "end_time": "2024-12-14T11:14:18.940099",
     "exception": false,
     "start_time": "2024-12-14T11:14:17.189907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.00000</td>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.000000</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>42000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.456643</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.219286</td>\n",
       "      <td>0.117095</td>\n",
       "      <td>0.059024</td>\n",
       "      <td>0.02019</td>\n",
       "      <td>0.017238</td>\n",
       "      <td>0.002857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.887730</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.312890</td>\n",
       "      <td>4.633819</td>\n",
       "      <td>3.274488</td>\n",
       "      <td>1.75987</td>\n",
       "      <td>1.894498</td>\n",
       "      <td>0.414264</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>254.000000</td>\n",
       "      <td>254.000000</td>\n",
       "      <td>253.000000</td>\n",
       "      <td>253.00000</td>\n",
       "      <td>254.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              label   pixel0   pixel1   pixel2   pixel3   pixel4   pixel5  \\\n",
       "count  42000.000000  42000.0  42000.0  42000.0  42000.0  42000.0  42000.0   \n",
       "mean       4.456643      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "std        2.887730      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "min        0.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "25%        2.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "50%        4.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "75%        7.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "max        9.000000      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "\n",
       "        pixel6   pixel7   pixel8  ...      pixel774      pixel775  \\\n",
       "count  42000.0  42000.0  42000.0  ...  42000.000000  42000.000000   \n",
       "mean       0.0      0.0      0.0  ...      0.219286      0.117095   \n",
       "std        0.0      0.0      0.0  ...      6.312890      4.633819   \n",
       "min        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
       "25%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
       "50%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
       "75%        0.0      0.0      0.0  ...      0.000000      0.000000   \n",
       "max        0.0      0.0      0.0  ...    254.000000    254.000000   \n",
       "\n",
       "           pixel776     pixel777      pixel778      pixel779  pixel780  \\\n",
       "count  42000.000000  42000.00000  42000.000000  42000.000000   42000.0   \n",
       "mean       0.059024      0.02019      0.017238      0.002857       0.0   \n",
       "std        3.274488      1.75987      1.894498      0.414264       0.0   \n",
       "min        0.000000      0.00000      0.000000      0.000000       0.0   \n",
       "25%        0.000000      0.00000      0.000000      0.000000       0.0   \n",
       "50%        0.000000      0.00000      0.000000      0.000000       0.0   \n",
       "75%        0.000000      0.00000      0.000000      0.000000       0.0   \n",
       "max      253.000000    253.00000    254.000000     62.000000       0.0   \n",
       "\n",
       "       pixel781  pixel782  pixel783  \n",
       "count   42000.0   42000.0   42000.0  \n",
       "mean        0.0       0.0       0.0  \n",
       "std         0.0       0.0       0.0  \n",
       "min         0.0       0.0       0.0  \n",
       "25%         0.0       0.0       0.0  \n",
       "50%         0.0       0.0       0.0  \n",
       "75%         0.0       0.0       0.0  \n",
       "max         0.0       0.0       0.0  \n",
       "\n",
       "[8 rows x 785 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "af697d20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:18.954375Z",
     "iopub.status.busy": "2024-12-14T11:14:18.954127Z",
     "iopub.status.idle": "2024-12-14T11:14:20.371826Z",
     "shell.execute_reply": "2024-12-14T11:14:20.371027Z"
    },
    "papermill": {
     "duration": 1.427462,
     "end_time": "2024-12-14T11:14:20.373968",
     "exception": false,
     "start_time": "2024-12-14T11:14:18.946506",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>pixel9</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>28000.000000</td>\n",
       "      <td>28000.000000</td>\n",
       "      <td>28000.000000</td>\n",
       "      <td>28000.000000</td>\n",
       "      <td>28000.000000</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "      <td>28000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.164607</td>\n",
       "      <td>0.073214</td>\n",
       "      <td>0.028036</td>\n",
       "      <td>0.011250</td>\n",
       "      <td>0.006536</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5.473293</td>\n",
       "      <td>3.616811</td>\n",
       "      <td>1.813602</td>\n",
       "      <td>1.205211</td>\n",
       "      <td>0.807475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>253.000000</td>\n",
       "      <td>254.000000</td>\n",
       "      <td>193.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>119.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        pixel0   pixel1   pixel2   pixel3   pixel4   pixel5   pixel6   pixel7  \\\n",
       "count  28000.0  28000.0  28000.0  28000.0  28000.0  28000.0  28000.0  28000.0   \n",
       "mean       0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "std        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "min        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "25%        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "50%        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "75%        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "max        0.0      0.0      0.0      0.0      0.0      0.0      0.0      0.0   \n",
       "\n",
       "        pixel8   pixel9  ...      pixel774      pixel775      pixel776  \\\n",
       "count  28000.0  28000.0  ...  28000.000000  28000.000000  28000.000000   \n",
       "mean       0.0      0.0  ...      0.164607      0.073214      0.028036   \n",
       "std        0.0      0.0  ...      5.473293      3.616811      1.813602   \n",
       "min        0.0      0.0  ...      0.000000      0.000000      0.000000   \n",
       "25%        0.0      0.0  ...      0.000000      0.000000      0.000000   \n",
       "50%        0.0      0.0  ...      0.000000      0.000000      0.000000   \n",
       "75%        0.0      0.0  ...      0.000000      0.000000      0.000000   \n",
       "max        0.0      0.0  ...    253.000000    254.000000    193.000000   \n",
       "\n",
       "           pixel777      pixel778  pixel779  pixel780  pixel781  pixel782  \\\n",
       "count  28000.000000  28000.000000   28000.0   28000.0   28000.0   28000.0   \n",
       "mean       0.011250      0.006536       0.0       0.0       0.0       0.0   \n",
       "std        1.205211      0.807475       0.0       0.0       0.0       0.0   \n",
       "min        0.000000      0.000000       0.0       0.0       0.0       0.0   \n",
       "25%        0.000000      0.000000       0.0       0.0       0.0       0.0   \n",
       "50%        0.000000      0.000000       0.0       0.0       0.0       0.0   \n",
       "75%        0.000000      0.000000       0.0       0.0       0.0       0.0   \n",
       "max      187.000000    119.000000       0.0       0.0       0.0       0.0   \n",
       "\n",
       "       pixel783  \n",
       "count   28000.0  \n",
       "mean        0.0  \n",
       "std         0.0  \n",
       "min         0.0  \n",
       "25%         0.0  \n",
       "50%         0.0  \n",
       "75%         0.0  \n",
       "max         0.0  \n",
       "\n",
       "[8 rows x 784 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "77a30948",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:20.387908Z",
     "iopub.status.busy": "2024-12-14T11:14:20.387608Z",
     "iopub.status.idle": "2024-12-14T11:14:21.916369Z",
     "shell.execute_reply": "2024-12-14T11:14:21.915577Z"
    },
    "papermill": {
     "duration": 1.53771,
     "end_time": "2024-12-14T11:14:21.918227",
     "exception": false,
     "start_time": "2024-12-14T11:14:20.380517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>4.456643</td>\n",
       "      <td>2.887730</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel0</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel1</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel2</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel3</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel779</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.002857</td>\n",
       "      <td>0.414264</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel780</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel781</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel782</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pixel783</th>\n",
       "      <td>42000.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>785 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            count      mean       std  min  25%  50%  75%   max\n",
       "label     42000.0  4.456643  2.887730  0.0  2.0  4.0  7.0   9.0\n",
       "pixel0    42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel1    42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel2    42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel3    42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "...           ...       ...       ...  ...  ...  ...  ...   ...\n",
       "pixel779  42000.0  0.002857  0.414264  0.0  0.0  0.0  0.0  62.0\n",
       "pixel780  42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel781  42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel782  42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "pixel783  42000.0  0.000000  0.000000  0.0  0.0  0.0  0.0   0.0\n",
       "\n",
       "[785 rows x 8 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d1c30250",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:21.932543Z",
     "iopub.status.busy": "2024-12-14T11:14:21.932274Z",
     "iopub.status.idle": "2024-12-14T11:14:22.288549Z",
     "shell.execute_reply": "2024-12-14T11:14:22.287780Z"
    },
    "papermill": {
     "duration": 0.365519,
     "end_time": "2024-12-14T11:14:22.290542",
     "exception": false,
     "start_time": "2024-12-14T11:14:21.925023",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2YAAAItCAYAAABSPWnlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB350lEQVR4nO3deZyNdeP/8fc5szIrZrGMbZSxM27FIIXKGlqICkmWbgp3C7qLFjcqlRIJI9xlS3ylbJUQCVmSpSyDrGOdMWNmzHZ+f/idc8+ZM7uZuWac1/Px8Hg41/U51/lcn/mc67re13V9rmOyWCwWAQAAAAAMYza6AgAAAADg7AhmAAAAAGAwghkAAAAAGIxgBgAAAAAGI5gBAAAAgMEIZgAAAABgMIIZAAAAABiMYAYAAAAABiOYAQAAAIDBCGYActS3b1+FhYUpLCxMY8aMMbo6Jcbp06dt7RIWFqbt27cbXSVJsqvT8uXLbdOXL19uN68k2L59u12dTp8+bXSVCtW+ffv07LPPqnnz5qpTp45tPa9du1aknztmzBjbZ/Xt2/eWl1eS+nq7du1s9Zg2bZph9bC63fswgOLlanQFAOTN9u3b1a9fP9vrSZMm6ZFHHrErM2bMGK1YscL2+q+//iq2+pU2p0+fVvv27e2mubq6yt3dXf7+/qpSpYoaN26sRx55RLVq1SrSumT8u919993673//W6SfVxwy99cff/xRISEhBtaoeF28eFGDBg1STExMvt+b+XtsMpnk5uYmLy8vBQYGKjQ0VO3bt1fHjh3l7u5eiLXOv8zfowULFqh58+YG1qjwlKY+bNT2rDRvu0rT3xfOg2AGIEd9+vTRfffdJ0m68847ja1MEUtNTVVqaqoSEhJ09uxZ7dy5U3PmzFGfPn00duxYeXh42Mr6+/vrlVdesb2uVq2aEVV2kLFODRs2NLAmuatWrZpdff39/Y2rTCHbsmWLLZSZTCY9+eSTqly5siTJ09MzX8uyWCxKTk5WcnKyrl69qsOHD2vt2rX64IMPNGXKFDVr1syufOfOnW3f1UqVKt3yupSkvj506FDFxcVJksLDww2rR2mQn+0ZgJKBYAYgR507dza6CsWiVatWatWqlRISEnTkyBFt3LhRN27ckCQtWrRI586d04wZM+Ti4iJJ8vb21sCBA42ssk1aWpqSk5NVpkyZElOnvKhUqVKpqm9+nDlzxvb/4OBgvf766wVe1iuvvKK0tDRdvHhR27Zt05EjRyRJ586d09NPP63PP/9cd911l618mzZt1KZNm4JXPpOS1Nd79epldBVKhfxuzwCUDAQzwElkvuXk/fff17Rp0/TTTz8pJiZGVatW1YABAxwOfPr27asdO3ZIkh5++GFNnjzZbv7ixYv1xRdf6OTJkypfvrw6d+6s559/Xl27drUdnA4fPlzPP/+8pJtjncaOHWt7f+bbLTOOf8rqds3ffvtNX375pfbs2aNLly7J3d1dd955p7p166ZevXrJzc2tQO0THh5ud/AZHR2t5557TgcOHJAkbdy4UUuXLlWfPn0k5XwLV2pqqr744gutWbNGx44dU0JCgnx8fBQQEKD69evr3nvvVZcuXRzaQpJ27Nhh1wbW5Wb++73zzjv68MMPtXXrVl25ckWffPKJ7r///lzbzyolJUWzZ8/WihUrdP78eQUFBenhhx/W4MGD7W6Py+lWpexuBcpqDFvGtrL2o9xuJUpLS9OKFSu0atUq/fnnn4qPj5e3t7dq166thx56SI888ohcXf+3G8vqb3Lp0iXNmzdPhw8flru7uyIiIjR27Nh8X0lat26dvv76ax04cECxsbEqU6aMatWqpQcffFB9+vRRmTJlsmwTSTp//rytTQpyu1fmULRo0SK9+eabslgsSklJ0SuvvKJ169bZ/m653V72ww8/aObMmTp8+LC8vb3Vrl07/etf/9KIESOy/K5n19fbtWtnF0Al2a17xs/+7bff9Pnnn2vfvn26evWq3NzcVK5cOYWGhqpx48Z6+umn5ePjk2tbZPzMjNuVzO3+ww8/aPPmzVq8eLFOnDhhW89XXnlFfn5+uX5OXvtwZhaLRV999ZW++OILRUVF5fq5JWV7Jklz5szR7t27dezYMV29elXXr19XmTJlVKNGDbVv3179+/dX2bJlJTlux6Xst12HDh3SkiVLdODAAZ0/f16xsbGyWCwKCAhQ48aN9dRTTzlc9c3rNjSjS5cuacGCBdq0aZP+/vtvpaamqmLFimrdurUGDRpku2ItFfzvCxQ1ghnghM6dO6dHHnlEFy9etE2LiorS66+/LrPZrMceeyxPy3n33XcVGRlpe33+/HnNnTtXv/32m+3sbGH68MMPNXPmTLtpKSkp2rt3r/bu3avVq1dr9uzZtoOHWxEcHKwZM2bowQcftK3LvHnz7A5ksvPaa6/ZjRGSpJiYGMXExOjo0aM6ceKEw0FFfly4cEG9evWy+/vl1/Dhw7Vx40bb69OnT2vatGk6cOCAZsyYIZPJVOBlF4aEhAQNHjxYO3futJseExOjHTt2aMeOHfq///s/zZ49W15eXlku46OPPtKuXbtsr5OSkrRu3Tr99ddf+uabb/J0K1daWppefPFFrVmzxm56SkqK9uzZoz179mjZsmWaN2+egoKCCrCm+denTx8dOXJEX375pSTp7NmzWr9+vbp27ZrrexctWqQ33njD9vrGjRv66quv9Ouvv+b7Fsu82rZtmwYOHKi0tDTbtJSUFCUkJOjMmTP6+eef1blz5zwFs7waPXq03d/+ypUrWrZsmU6ePKkvvvii0D4nszfeeENbtmzJ0+eWtO3Z7NmzHcZExsXF6Y8//tAff/yh1atXa/Hixdl+37Kza9cuLVq0yGH62bNndfbsWa1du1YTJ060O4mU323onj179Nxzz+nq1at27/n777+1cOFCrVq1SjNnznQIgEBJQzADnNCpU6fk4eGhPn36yNPTU4sWLVJSUpKkm2dN8xLM9u3bp7lz59peBwYGqnv37kpISNCyZcuUnJxcqHX+7rvv7A5iWrduraZNm+ry5ctasWKFEhIS9Ntvv2nSpEl6++23C+UzrWdbf/zxR0nSiRMnFB0dreDg4Gzfc/36dX3zzTe21x06dFC9evUUFxdnG+dh1bBhQ73yyitavXq19u/fL0mqWrWq3cFSVuN5Tpw4IUl68MEHFRYWprNnz8rb2ztf67Zp0yZ1795dlSpV0vr16xUVFSVJ2rBhg1auXKkePXrka3kZvfLKK/r777+1ePFi27ShQ4fK19dXUt7GKk6YMMGurVq3bq0mTZpo7969tgPfXbt2acKECZo0aVKWy9i1a5caNmyo1q1ba/v27dq9e7ekm+33ww8/5Ckcz5w50y6UNWnSRK1atdKxY8e0du1aSdKxY8f00ksvacGCBbZxc1u3btXWrVslSX5+fhoyZIikwhnzJUk9e/a0BTPp5hWj3ILZ+fPn7dqqbNmyeuyxx2Q2m7Vs2TLFx8fnqw5Dhw7VmTNn7L6XvXv3tvVZ67ouWbLEFspCQ0PVsWNHubi46Ny5czp06JAOHjyYr8/Ni127dikiIkLh4eH64YcfdPjwYUnSzp07tXfvXjVp0iTH9xe0D2/ZsiVPn1sSt2cVK1ZU8+bNVaVKFfn6+spisej06dNas2aNEhISdPjwYS1cuFCDBg3K17bL3d1dTZo0UZ06deTv7y8vLy/FxcVp27Zt+uOPP2SxWPTOO++oc+fO8vT0zNc2VJLi4+M1bNgwWyirUqWKOnXqJE9PT61bt05HjhxRXFycnn/+ea1fv14+Pj6Fso0CigLBDHBSH3zwge6//35JNw+gJk6cKEk6fvy47ZaxnCxbtkwWi0WS5OLiov/+97+qWbOmJKlp06Z66aWXCrW+c+bMsf2/R48eeuedd2yv77rrLo0cOVLSzVtsXnzxxUJ7kIR1naxyC2apqam2g1Bvb29NmTLF7tZA68GOdHPnf+edd+rIkSO2g5u8jrt69dVX1b9//3yvj9XIkSM1dOhQSdKgQYN0//332w5slixZckvBbODAgdq+fbvdQU/Pnj3z/MSzq1ev6v/+7/9srzt16qSpU6fa1d0allauXKlXXnlF5cqVc1hOo0aNtHDhQrm5uSklJUX33nuvLl++LEn6448/cg1m6enpWrBgge11eHi4vvzyS9u4nPfee8/WL7dv365Dhw6pbt26GjhwoBISEmzBrCjGaGXVL3PzzTff2F3J/uijj2xj0dq1a+dwC2ZuevXqpdOnT9sFjM6dOzs8lTHjZw4fPtyh3S9evJjvEwu5eeCBBzRt2jSZTCb1799fLVu2tH0v//jjj1yDWUH7cF4/tyRuz1auXKm4uDjt3r1b586dU2JiomrVqqX69evbwtCWLVs0aNCgfG27evXqpV69eunPP//U4cOHFRMTIxcXF7Vv315//PGHpJtXw/bv369mzZrlaxtqbSPr99rPz0/Lly+3tdfAgQPVvn17XblyRVeuXNGKFSvUr1+/W95GAUWFYAY4oaCgIFsokxx31teuXcv1QMm6M5akBg0a2C2jc+fOGjt2rFJSUgqlvomJiTp06JDt9f/93//ZHbhnlJqaqn379hXaww+s4TOv/Pz8bAcs8fHxat++vRo2bKjq1asrLCxMERERqlq16i3Vyc/PT08++eQtLaN79+62/3t7e6tt27a23z0riisY+bFv3z67294efvhhu/kPP/ywLZilpaVp3759uvfeex2W07NnT9sYHTc3N4WEhNgO4GJjY3Otx/Hjx+1u7XrooYfsHpbw8MMP2x1g79mzR3Xr1s3DGt66/PZLyf47W758ebvviPVKSeYxY4WhWbNm2rBhg6Sb498WL16smjVrqmbNmmratKkaNWpU6LfO9unTx7ZMf39/lStXTpcuXZKUt799UX5uSdyepaena8qUKVqwYEGO2+3z58/n+zMPHDig0aNH2x5ak9uy87sNtV4Jl262cU4/17Bnz558n4AAihPBDCglMj7kQFKWY7istyNKynHQeJUqVexeZ/4tpPT09FzrY31ktXTzIC8jFxcX+fv752kMlMVisR3IZHf747Vr1/J1IHrlypU8l82N9bZBq5yulllNmTJFL774oo4ePaoLFy7Ybh2SJLPZrH79+jkMnM+PqlWrOvSH/KpQoYLd64CAANv/k5KSlJyc7NAvMv8NCvt2VavMB86Z65r5dXY/2JxTP89Lf8o83iZjG+WnHkWhIP0yY/0yr4t083bkoghm/fv3119//aVvv/1WycnJtjGCVrVr11ZkZGShjtG71b99UX5uSdyeLViwwG68cHbye7ItKSlJQ4YMydO+IOP2JD/b0PwE7cJsS6AoEMyAUiJz+Ml4K4fVqVOnbP/P6tYuq8yhrSBnqzMO1M+8s0tLS8v2h3XNZrPd66SkJNsT7TIfNGT1WdLN265yGsRdv379bOflR3R0tN1A/po1a+bpALhOnTr67rvv9Ndff+ngwYM6ceKEDh48qM2bNys9PV3z5s1T27Zt1aJFiwLVqzAeBnD58mW78U7Ws/qS5OHhYTugzNg3MgZ/STp58uQt1yMrmZ9eZ73Kld1r67iQzDKH1/z288y3j2Vso/zUoygsW7bM7nVe+lLG+mV1gHorD5PJiaurq959912NGTNGu3fv1vHjx3X8+HH98MMPio2N1eHDh/X+++/b3c5XGJ+ZUXE9zCYvn1sSt2cZx1EGBQVp+vTpqlOnjtzd3R0e8pQfO3futOtXzzzzjAYNGqTy5csrMTEx21tK87MNzbi9CAwM1IABA7KtT2GN8QSKCsEMKCWqV68uf39/W+BZuXKlnnrqKduOZvPmzXa3KjVu3LhI69OgQQPbo5f379+v48eP225nXL16dbZnVjMflOzdu1cRERFKT0/XZ599luV7ypYtq7p169pu/4mJiVG/fv0cAmZcXJw2b95cKAO3L1y4oOHDh9tdmcxph5+RdaxRWFiY3WOZu3XrZvt5gIMHD9oOpjMezCUmJt5y3fNi5cqVtjFm8fHx+umnn2zzMh4IZjyYP378uK5duyZfX1/FxcXZPXwis8wHqJlDXU4aNWokFxcX2+2MK1assLtVMePT2lxcXNSoUaM8Lzs/atasafedW7VqlXr37m27nTHzU+OaNm1aJPXIbOnSpXZtX6VKFT3wwAO5vq9BgwZat26dpJsh89dff7X1we3btxfoalnm72BWf+eoqChVqlRJ5cuXt7uFunbt2raHkRh9+2xWbqUP56Qkbs8ynkhr0KCB7Tt148YNu21DZrltuzKfoHvooYdsJxkzP+k0o/xsQ8PDw23Lunr1qlq1aqU6derYLc9isWjbtm12t0AW1d8XuBUEM6CUMJvN6t27t22g/cWLF9WpUyeFhYUpMTHR4f79J554okjr89hjj2np0qWyWCxKS0tT37591aNHD12/ft3hbH5GDRo0kMlkst3K8/zzz6tVq1Y6fvy4w2+aZTRw4EDbA0V2796tbt26qW3btvLz81NMTIwOHjyoXbt2KSgoqECPot+zZ48iIyNtbblx40a7HXXbtm3Vs2fPPC2rV69eCgoKUrNmzRQUFCRvb2/9+eefduuXMaBmvAp34MABTZgwQZUqVZKbm1uRjYeYOnWqoqKiVLlyZa1bt87uMdMZf8uuYcOGtv/Hx8erR48eatSokXbv3p3jAycyX1l88803dc8998jFxUXt2rVzGNeYUbly5fTwww/b+tGaNWsUFxfn8FRG6eZYuZyuDt8Ks9ms/v3766OPPpJ0s4888cQTatWqlaKiouwOLJs3b+5wMFhYIiMjlZaWpkuXLmnbtm22J/1JN2+Ve++99xxuO81K9+7d9cknn9gOzocNG2Z7AmtO39mclCtXzvZwFenmI+D//PNPubq66u6771bDhg01b948ffPNN2rRooVCQkIUEBCg2NhYu3FVhfmo/MJyK304NyVte1azZk3bHQsbN27UuHHjFBAQoHXr1tme2JqV3LZdmdvo5ZdfVqdOnXTmzBm7Jy9mlp9t6COPPKJPP/1UV69eVWpqqvr06aOOHTuqevXqSk5O1vHjx7Vjxw7b75xZw1lR/n2BgiKYAaXIsGHDtH//ftuBaWJiovbu3etQbvjw4WrZsmWR1qVRo0Z65plnbLe4XLx4UbNnz5Z084pLdHS0w61f0s2d4UMPPWTbKcfFxdkeO37vvfdq06ZNWX7eQw89pCNHjtiuqkVFReV4wJBfGR9vnpHJZNKTTz6p0aNHO9yGmZPTp09nebupJIWEhKhjx4621/fff79mzJih9PR0paen236Ut2zZskUWzO666y6tXLnSYfp9991n90TGBx54QDVq1LAdtJ05c8Z2ZSWnv1dISIjq1atnuxKScVxRlSpVcj3o+fe//62TJ0/aPQ0uYyCTbl6heu2113Jf2VswZMgQ/fXXX7Y+av2NqYxq1aql9957r8jq8O6772Y5vUqVKnr//fcVHh6ep+UEBwdr7Nixtt8xi4+P17x582zLCg4O1rFjxyTl/dY/d3d33Xffffr+++8l3bzSYb0S9Morr9iCfWJiYrZXXsxms5555pk8fV5xutU+nJOStj179tln9fPPPys1NVXp6elasmSJpJvboAcffFDr16/P8nNy23Y1aNBA99xzj37++WdJ0tGjRzVt2jRJNx+ek/mqc0Z53Yb6+PhoxowZ+uc//6mrV68qISHB9iCjnBTl3xcoKIIZUIq4u7tr9uzZWrVqlb799lsdOnRIMTExMpvNCgwMVHh4uHr37l1sP6L5yiuvqFq1avrvf/+rkydPqly5curYsaNGjBihbt26Zfu+//znPwoICNB3332nK1euqEqVKurZs6eefvrpHMdT/Otf/9J9992nRYsWaffu3bpw4YIsFovKly+vO++8U3fffbc6depU4PUxm83y9PSUn5+fQkJC1KRJEz322GOqUaNGvpbzxhtv6LffftOBAwd08eJFXbt2Te7u7qpataruueceDRw40O4KQd26dfX+++9rzpw5Onr0aJH8OHdmc+bM0cyZM/XNN98oOjpaQUFBevjhhzVkyBC7g3IPDw/NmzdP77zzjrZu3aobN26oTp06Gjx4sHx8fLINZpI0bdo0TZ48WTt37lRsbGy+HnhQtmxZzZs3TytWrNCqVav0119/KT4+Xl5eXgoLC1PXrl316KOP3vJDUHLj4uKijz76SGvXrtXy5cu1f/9+xcbGqkyZMgoNDVWHDh3Up0+fQhn3lx2TySRXV1d5eXkpMDBQtWrV0v33368OHTrk6UpZRn369FFAQIBmzpypw4cPy8vLS23atNFLL71kdxIgP+Pl3n77bXl7e+vnn3/WlStXHB4e9Nhjj8nX11d79+7V6dOnbWUCAgLU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y5cva8CAAdmWmTNnjmrXrq177rnnlj8PAACULosXL9bu3bs1adKkAr3fZDLphx9+0J49e+Tj4yNPT0998MEHWrt2re0Es4+PjzZu3KgvvvhCZcqUkbe3t9auXas1a9bI1dXYx28QzEqxgoz7kaRu3bqpWrVq8vT0VKVKldS3b1+dPXvWNn/jxo3q3r27KlWqJC8vLzVp0kRffvllMawRSpJb3ThmFhkZqQ4dOigkJCTL+UlJSfryyy+5WgagWBTVPpSxs0DBnDp1SiNGjNCXX34pT0/PAi3DYrFo2LBhCgoK0s8//6wdO3aoR48eeuihh3Tu3DlJUmJiogYOHKhWrVrp119/1datW9WgQQN16dJFiYmJhblK+UYwK6VuZVBk27ZttXTpUv3111/6+uuvdezYMT322GO2+b/88osaNWqkr7/+Wvv27dOAAQPUr18/ffvtt0W2PihZCmPjmNHp06e1bt26HEPXihUrFBcXp/79+9/y5wFATopyH8rYWaBgdu3apQsXLqhp06ZydXWVq6urNm3apI8//liurq5KS0vLdRkbNmzQt99+q8WLF6tVq1Zq2rSpZsyYoTJlymj+/PmSpIULF+rEiRP6/PPPddddd6lFixZauHChjh8/rpUrVxb1auaIx+WXQhnH/UyYMMFunvXM38aNG7N9/6hRo2z/r169usaMGaMePXooJSVFbm5uDjukESNGaP369Vq+fLm6du1aaOuBkivjxtEqLS1Nmzdv1ieffKIbN27IxcUlz8v7/PPPVaFCBXXr1i3bMnPmzFHXrl0VHBx8S3UHgJwU9T7U29tb3t7etjK///67Dh48qJkzZxbqegC3m/bt2+uPP/6wmzZgwADVqVNHo0ePztNxR0JCgiTJbLa/9mQ2m5Wenm4rYzabbePdrfNNJpOtjFG4YlYKFea4nytXrujLL79Uy5Yt5ebmlm252NhYlS9f/pY/D6WDdeO4d+9e279mzZrpySef1N69e/MVyiwWiz7//HP169cv2z52/Phx/fTTT9zGCKDIFfc+lLGzQN74+PioQYMGdv+8vLxUoUIFNWjQQJJ0/vx57d27V0ePHpUk27HKlStXJEkREREqV66c+vfvr99//932m2bHjx9Xly5dJEkPPPCArl69qmHDhunQoUM6cOCABgwYIFdXV7vfOjMCwayUKaxxP6NHj7Z19r//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sWLFgi4eAAAAAJxGgYNZjx49tGbNGo0bN05RUVFKS0tTenq6oqKiNH78eK1du1YPP/xwYdYVAAAAAG5LBX4q49ChQ3Xq1CktXbpUX331lczmmxkvPT1dFotFDz/8sIYOHVpoFQUAAACA21WBg5mLi4smT56sp59+Wps3b9aZM2ckSVWqVFGbNm1Up06dQqskAAAAANzO8hXMbty4of/85z+688471bdvX0lSnTp1HELYggULtHjxYv373//md8wAAAAAIBf5GmO2ZMkSrVixQvfdd1+O5e677z59/fXX+uqrr26lbgAAAADgFPIVzNasWaMHH3xQVatWzbFctWrV1LFjR3333Xe3VDkAAAAAcAb5CmaHDx/WP/7xjzyVDQ8P119//VWgSgEAAACAM8lXMEtJScnzmDE3NzclJycXqFIAAAAA4EzyFcyCgoJ05MiRPJU9cuSIgoKCClQpAAAAAHAm+QpmLVu21MqVK3X58uUcy12+fFkrV65Uy5Ytb6lyAAAAAOAM8hXMBg0apBs3bqh///76/fffsyzz+++/6+mnn9aNGzf07LPPFkolAQAAAOB2lq/fMatataqmTp2qf/3rX+rdu7eqVq2q2rVry8vLS9evX9eRI0f0999/y9PTUx988IGqVatWVPUGAAAAgNtGvoKZdPM3yr755hvNnj1bGzdu1A8//GCbFxQUpJ49e2rQoEG5PlIfAAAAAHBTvoOZJIWEhOjNN9+UJMXHx+v69evy8vKSt7d3oVYOAAAAAJxBgYJZRt7e3gQyAAAAALgF+Xr4BwAAAACg8BHMAAAAAMBgBDMAAAAAMBjBDAAAAAAMRjADAAAAAIMRzAAAAADAYAQzAAAAADAYwQwAAAAADEYwAwAAAACDEcwAAAAAwGAlKpitWbNGzz33nNq0aaMmTZqoe/fuWrZsmSwWi125r776Sh06dFDDhg3VrVs3/fTTTw7LiouL06uvvqq7775b4eHheuGFF3ThwgWHcrt379bjjz+uRo0aqW3btpo1a5bD5wEAAABAUSpRwWzevHkqU6aMxowZo08//VRt2rTR66+/runTp9vKfPfdd3r99dfVqVMnzZ49W02aNNHw4cO1d+9eu2WNHDlSW7du1RtvvKEpU6bo+PHjGjRokFJTU21lTp48qYEDByowMFCfffaZ+vfvr48//lhz584trlUGAAAA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PDy8MKoFAAAAwIk4/Riz0NBQh7FkcXFxunjxosPYMwAAAAAoCk4fzNq0aaNffvlF165ds01bu3atzGazWrVqZWDNAAAAADgLp3/4R2xsrLp06aKaNWtqyJAhth+Yfuihh/iBaQAAAADFwumDmSQdO3ZMb7/9tvbs2SMvLy91795do0aNkru7u9FVAwAAAOAECGYAAAAAYDCnH2MGAAAAAEYjmAEAAACAwQhmAAAAAGAwghkAAAAAGIxgBgAAAAAGI5gBAAAAgMEIZgAAAABgMIKZEzh27JgGDBigJk2aqFWrVnr33XeVnJxsdLVKtJMnT2rcuHHq3r276tWrp65duxpdpRJvzZo1eu6559SmTRs1adJE3bt317Jly8RPJeZs06ZNeuqpp9SiRQs1aNBA7du316RJkxQXF2d01UqN69evq02bNgoLC9Mff/xhdHVKrOXLlyssLMzh35QpU4yuWom3YsUK9ejRQw0bNlTz5s317LPPKikpyehqlVh9+/bNsq+FhYXpu+++M7p6JdaPP/6onj17Kjw8XK1bt9aIESN06tQpo6tV4v300096+OGH1aBBA9177736+OOPlZaWZnS1CsTV6AqgaMXGxqp///6qUaOGpk2bpujoaE2ePFlJSUkaN26c0dUrsY4cOaJNmzapcePGSk9PJ1zkwbx581SlShWNGTNG5cqV0y+//KLXX39d58+f1/Dhw42uXokVExOjRo0aqW/fvvL399eRI0c0bdo0HTlyRHPnzjW6eqXCjBkzSu1O2Ahz5syRj4+P7XVwcLCBtSn5Pv30U82ePVtDhw5VkyZNdPXqVW3bto0+l4Px48crPj7ebtr8+fO1fv16RUREGFSrkm379u0aPny4evTooVGjRikmJkYfffSRnnnmGa1atUqenp5GV7FE2rt3r/75z3+qS5cu+te//qWjR49q6tSpSkxM1OjRo42uXv5ZcFubOXOmpUmTJparV6/api1evNhSt25dy/nz542rWAmXlpZm+//o0aMtXbp0MbA2pcPly5cdpr322muWpk2b2rUncrdkyRJL7dq1+Y7mwdGjRy1NmjSxLFq0yFK7dm3Lvn37jK5SifX1119bateuneV3FVk7duyYpV69epaNGzcaXZVSr127dpZBgwYZXY0S6/XXX7e0a9fOkp6ebpu2bds2S+3atS07d+40sGYl2zPP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SoqaNWumsWPH6o477jC6aiVabGysWrVqpf79++vll182ujolnsVi0eLFi7Vo0SKdOnVKXl5eatKkiUaNGqVatWoZXb0S69ChQxo/fryOHDki6ebDeUaMGKHw8HCDa1YwBDMAAAAAMBiPSwMAAAAAgxHMAAAAAMBgBDMAAAAAMBjBDAAAAAAMRjADAAAAAIMRzAAAAADAYAQzAAAAADAYwQwAcFubNm2awsLCCvTe5cuXKywsTKdPny7kWhVM37591bVr10JdZrt27TRmzJhCXSYAIP8IZgCAUsMalKz/GjZsqNatW2vgwIFasGCB4uPji7wOX375pZYvX57n8mFhYXrrrbeKsEYAgNuBq9EVAAAgv1544QWFhIQoNTVVly5d0o4dOzRx4kTNmzdPM2bMUJ06dWxln3vuOQ0ePLhAn9O9e3d16dJF7u7utmmLFi1SuXLl9Mgjj9zyegAAYEUwAwCUOm3atFHDhg1tr4cMGaJt27Zp6NCh+uc//6nVq1fL09NTkuTq6ipX14Lt7lxcXOTi4lIodQYAICfcyggAuC1ERETon//8p86cOaNvvvnGNj2rMWZJSUmaMGGCmjdvrvDwcA0dOlTR0dEKCwvTtGnTbOUyjzFr166djhw5oh07dthup+zbt+8t1/2HH37Q4MGD1bp1azVo0ED333+/pk+frrS0tCzL79+/X71791ajRo3Url07LVq0yKFMcnKyPv74Yz3wwANq0KCB7r33Xr377rtKTk6+5foCAAofV8wAALeN7t2764MPPtCWLVvUq1evbMuNGTNGa9asUffu3dW4cWPt3LkzT7c7vvrqq3r77bdVtmxZDR06VJIUEBBwy/VesWKFypYtqwEDBqhs2bL69ddf9fHHHys+Pl6jR4+2KxsbG6vBgwerU6dO6tKli9asWaM33nhDbm5ueuyxxyRJ6enpeu6557Rr1y716tVLtWrV0uHDhzV//nydOHFCM2bMuOU6AwAKF8EMAHDbqFixonx8fHTq1Klsyxw4cEBr1qxR//799eqrr0qSnnzySY0dO1Z//vlnjsu///77NXXqVJUrV07du3cvtHq///77tlsvJalPnz4aN26cFi1apFGjRtmNcbtw4YLGjBmjAQMGSJIef/xx9erVSx988IG6d+8uNzc3rVq1Sr/88ov++9//qlmzZrb33nnnnRo/frx2796tpk2bFlr9AQC3jlsZAQC3lbJly+r69evZzv/5558lSU888YTd9KeeeqpI65WTjKEsPj5eV65cUbNmzZSYmKioqCi7sq6urnr88cdtr93d3fX444/r8uXLOnDggCRp7dq1qlWrlkJDQ3XlyhXbvxYtWkiStm/fXgxrBQDID66YAQBuKwkJCapQoUK288+ePSuz2ayQkBC76dWrVy/qqmXryJEjmjp1qn799VeHR/7HxcXZvQ4KClLZsmXtptWoUUOSdObMGTVp0kQnT57UsWPHFBERkeXnXb58ufAqDwAoFAQzAMBt4/z584qLi1O1atWMrkqeXbt2TU899ZS8vb31wgsvqFq1avLw8NCBAwc0ZcoUpaen53uZ6enpql27tsaOHZvl/IoVK95qtQEAhYxgBgC4baxcuVKS1Lp162zLVK5cWenp6Tp9+rTtSpMknTx5Mk+fYTKZbqmOme3YsUMxMTH65JNPdNddd9mmW58EmdmFCxeUkJBgd9XsxIkTkqQqVapIkqpVq6Y///xTERERhV5fAEDRYIwZAOC2sG3bNs2YMUMhISHq1q1btuWsoW3hwoV207/44os8fU6ZMmV07dq1glc0E7P55q7YYrHYpiUnJzvUzyo1NVVLliyxK7tkyRKVL19e9evXlyR16tRJ0dHRWrp0qcP7k5KSlJCQUGj1BwAUDq6YAQBKnc2bNysqKkppaWm6dOmStm/frq1bt6py5cr69NNP5eHhke17GzRooA4dOmj+/PmKiYmxPS7fetUptytM9evX16JFizRjxgxVr15d5cuXz3Ysl9X+/fuzfET93XffrfDwcPn5+WnMmDHq27evTCaTVq5caRfUMgoKCtLs2bN15swZ1ahRQ6tXr9ahQ4f09ttvy83NTdLNnw1Ys2aNxo8fr+3bt6tp06ZKS0tTVFSU1q5dqzlz5tj9QDcAwHgEMwBAqfPxxx9Lktzc3OTv76/atWvr1Vdf1SOPPCJvb+9c3//OO+8oICBA3333nb7//nu1bNlSH374oTp27Gj3aPqsDBs2TGfPntWcOXN0/fp13X333bkGs99//12///67w/QRI0aoWbNmmjlzpt555x1NnTpVvr6+6tatmyIiIjRw4ECH9/j5+Wny5MmaMGGCli5dqoCAAI0bN87ud9vMZrOmT5+uefPmaeXKlfr+++9VpkwZhYSEqG/fvqpZs2aubQQAKF4mS3an5AAAcCKHDh1Sjx499N577+V4KyQAAEWBMWYAAKeTlJTkMG3+/Pkym812D+AAAKC4cCsjAMDpzJkzR/v371eLFi3k4uKizZs3a/PmzXr88cdVqVIlo6sHAHBC3MoIAHA6W7du1SeffKJjx44pISFBlSpVUvfu3TV06FC5unLOEgBQ/AhmAAAAAGAwxpgBAAAAgMEIZgAAAABgMIIZAAAAABiMYAYAAAAABiOYAQAAAIDBCGYAAAAAYDCCGQAAAAAYjGAGAAAAAAYjmAEAAACAwf4fu+OGJfCZp9YAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Set a custom style and color palette\n",
    "sns.set_theme(style=\"whitegrid\")\n",
    "colors = sns.color_palette(\"viridis\", len(train['label'].unique()))\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "ax = sns.countplot(\n",
    "    x=train['label'],\n",
    "    palette=colors,\n",
    "    order=sorted(train['label'].unique())  # Ensure labels are in order\n",
    ")\n",
    "\n",
    "for p in ax.patches:\n",
    "    ax.annotate(\n",
    "        f'{int(p.get_height())}', \n",
    "        (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "        ha='center', va='center', \n",
    "        xytext=(0, 5), textcoords='offset points', \n",
    "        fontsize=10, color='black'\n",
    "    )\n",
    "\n",
    "plt.title('Unique Distribution of Digits in the Dataset', fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Digit Label', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6cc5ecca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:22.309465Z",
     "iopub.status.busy": "2024-12-14T11:14:22.309198Z",
     "iopub.status.idle": "2024-12-14T11:14:23.156825Z",
     "shell.execute_reply": "2024-12-14T11:14:23.156036Z"
    },
    "papermill": {
     "duration": 0.857876,
     "end_time": "2024-12-14T11:14:23.158684",
     "exception": false,
     "start_time": "2024-12-14T11:14:22.300808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 5, figsize=(15, 5), constrained_layout=True)\n",
    "\n",
    "# Iterate through the first 5 rows of the dataset\n",
    "for i, ax in enumerate(axes):\n",
    "    ax.imshow(train.iloc[i, 1:].values.reshape(28, 28), cmap='gray')\n",
    "    ax.set_title(f\"Label: {train['label'][i]}\", fontsize=12, fontweight='bold', color='darkblue')\n",
    "    ax.axis('off')  # Hide axes for a cleaner look\n",
    "\n",
    "# Add an overall title for the figure\n",
    "fig.suptitle(\"Sample Digits from the Dataset\", fontsize=16, fontweight='bold', color='darkgreen')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db3db2f9",
   "metadata": {
    "papermill": {
     "duration": 0.007024,
     "end_time": "2024-12-14T11:14:23.173133",
     "exception": false,
     "start_time": "2024-12-14T11:14:23.166109",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "113a4fde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:23.188687Z",
     "iopub.status.busy": "2024-12-14T11:14:23.188399Z",
     "iopub.status.idle": "2024-12-14T11:14:23.749681Z",
     "shell.execute_reply": "2024-12-14T11:14:23.748881Z"
    },
    "papermill": {
     "duration": 0.572008,
     "end_time": "2024-12-14T11:14:23.752312",
     "exception": false,
     "start_time": "2024-12-14T11:14:23.180304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data shape: (33600, 28, 28, 1)\n",
      "Validation data shape: (8400, 28, 28, 1)\n"
     ]
    }
   ],
   "source": [
    "# Separate features and labels\n",
    "X = train.drop('label', axis=1).values / 255.0  # Normalize pixel values\n",
    "y = train['label'].values\n",
    "\n",
    "X = X.reshape(-1, 28, 28, 1)  \n",
    "y = tf.keras.utils.to_categorical(y, 10)  \n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Training data shape: {X_train.shape}\")\n",
    "print(f\"Validation data shape: {X_val.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "859ddc98",
   "metadata": {
    "papermill": {
     "duration": 0.00734,
     "end_time": "2024-12-14T11:14:23.767569",
     "exception": false,
     "start_time": "2024-12-14T11:14:23.760229",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## CNN Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a7203049",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:23.783279Z",
     "iopub.status.busy": "2024-12-14T11:14:23.783023Z",
     "iopub.status.idle": "2024-12-14T11:14:24.642504Z",
     "shell.execute_reply": "2024-12-14T11:14:24.641705Z"
    },
    "papermill": {
     "duration": 0.869283,
     "end_time": "2024-12-14T11:14:24.644184",
     "exception": false,
     "start_time": "2024-12-14T11:14:23.774901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">640</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">12</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">131,584</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">5,130</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │           \u001b[38;5;34m640\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m24\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m36,928\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m12\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │       \u001b[38;5;34m147,584\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_4 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │       \u001b[38;5;34m295,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │         \u001b[38;5;34m1,024\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m256\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m131,584\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m5,130\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">692,682</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m692,682\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">691,786</span> (2.64 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m691,786\u001b[0m (2.64 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> (3.50 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m896\u001b[0m (3.50 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from tensorflow.keras import Input\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPooling2D, Dropout, Flatten, Dense\n",
    "\n",
    "model = Sequential([\n",
    "    # Input Layer\n",
    "    Input(shape=(28, 28, 1)),\n",
    "\n",
    "    # First Convolutional Block\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Conv2D(64, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Dropout(0.4),\n",
    "\n",
    "    # Second Convolutional Block\n",
    "    Conv2D(128, (3, 3), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Conv2D(128, (3, 3), activation='relu'),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Dropout(0.4),\n",
    "\n",
    "    # Third Convolutional Block\n",
    "    Conv2D(256, (3, 3), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling2D((2, 2)),\n",
    "    Dropout(0.6),\n",
    "\n",
    "    # Fully Connected Layers\n",
    "    Flatten(),\n",
    "    Dense(512, activation='relu'),\n",
    "    Dropout(0.6),\n",
    "    Dense(10, activation='softmax')  # Output layer for 10 classes\n",
    "])\n",
    "\n",
    "# Print model summary\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59c78dce",
   "metadata": {
    "papermill": {
     "duration": 0.008356,
     "end_time": "2024-12-14T11:14:24.661477",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.653121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Compiling modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d8a27706",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:24.678235Z",
     "iopub.status.busy": "2024-12-14T11:14:24.677995Z",
     "iopub.status.idle": "2024-12-14T11:14:24.688586Z",
     "shell.execute_reply": "2024-12-14T11:14:24.688003Z"
    },
    "papermill": {
     "duration": 0.020844,
     "end_time": "2024-12-14T11:14:24.690193",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.669349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(\n",
    "    optimizer='Nadam', \n",
    "    loss='categorical_crossentropy', \n",
    "    metrics=['accuracy']\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a75ebb0f",
   "metadata": {
    "papermill": {
     "duration": 0.007599,
     "end_time": "2024-12-14T11:14:24.705820",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.698221",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "976531b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:24.722601Z",
     "iopub.status.busy": "2024-12-14T11:14:24.722162Z",
     "iopub.status.idle": "2024-12-14T11:14:24.805500Z",
     "shell.execute_reply": "2024-12-14T11:14:24.804567Z"
    },
    "papermill": {
     "duration": 0.093849,
     "end_time": "2024-12-14T11:14:24.807512",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.713663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "datagen = ImageDataGenerator(\n",
    "    rotation_range=12,      \n",
    "    zoom_range=0.15,         \n",
    "    width_shift_range=0.15,  \n",
    "    height_shift_range=0.15  \n",
    ")\n",
    "\n",
    "datagen.fit(X_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a64e524",
   "metadata": {
    "papermill": {
     "duration": 0.007851,
     "end_time": "2024-12-14T11:14:24.823868",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.816017",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0c83dc8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:14:24.840808Z",
     "iopub.status.busy": "2024-12-14T11:14:24.840512Z",
     "iopub.status.idle": "2024-12-14T11:15:34.031450Z",
     "shell.execute_reply": "2024-12-14T11:15:34.030469Z"
    },
    "papermill": {
     "duration": 69.201711,
     "end_time": "2024-12-14T11:15:34.033494",
     "exception": false,
     "start_time": "2024-12-14T11:14:24.831783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1734174868.637050      65 service.cc:145] XLA service 0x7c5ea8008b40 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1734174868.637117      65 service.cc:153]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m  6/263\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m7s\u001b[0m 30ms/step - accuracy: 0.0924 - loss: 5.1594"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1734174876.835938      65 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 66ms/step - accuracy: 0.3440 - loss: 2.3367 - val_accuracy: 0.1082 - val_loss: 23.4065 - learning_rate: 0.0010\n",
      "Epoch 2/5\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 37ms/step - accuracy: 0.8606 - loss: 0.4381 - val_accuracy: 0.3580 - val_loss: 4.6932 - learning_rate: 0.0010\n",
      "Epoch 3/5\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 38ms/step - accuracy: 0.9224 - loss: 0.2628 - val_accuracy: 0.9849 - val_loss: 0.0465 - learning_rate: 0.0010\n",
      "Epoch 4/5\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 37ms/step - accuracy: 0.9440 - loss: 0.1841 - val_accuracy: 0.9868 - val_loss: 0.0398 - learning_rate: 0.0010\n",
      "Epoch 5/5\n",
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 37ms/step - accuracy: 0.9545 - loss: 0.1535 - val_accuracy: 0.9900 - val_loss: 0.0259 - learning_rate: 0.0010\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=4)\n",
    "\n",
    "history = model.fit(\n",
    "    datagen.flow(X_train, y_train, batch_size=128), \n",
    "    validation_data=(X_val, y_val),              \n",
    "    epochs=5,                                     \n",
    "    callbacks=[early_stopping, reduce_lr]          \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "385bb650",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:15:34.110366Z",
     "iopub.status.busy": "2024-12-14T11:15:34.110072Z",
     "iopub.status.idle": "2024-12-14T11:15:34.910344Z",
     "shell.execute_reply": "2024-12-14T11:15:34.909400Z"
    },
    "papermill": {
     "duration": 0.84016,
     "end_time": "2024-12-14T11:15:34.912216",
     "exception": false,
     "start_time": "2024-12-14T11:15:34.072056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2, figsize=(14, 6), constrained_layout=True)\n",
    "\n",
    "# Plot training and validation accuracy\n",
    "axes[0].plot(history.history['accuracy'], label='Train Accuracy', color='dodgerblue', linestyle='-', marker='o', markersize=6)\n",
    "axes[0].plot(history.history['val_accuracy'], label='Validation Accuracy', color='orange', linestyle='--', marker='s', markersize=6)\n",
    "axes[0].set_title('Model Accuracy', fontsize=14, fontweight='bold')\n",
    "axes[0].set_xlabel('Epochs', fontsize=12)\n",
    "axes[0].set_ylabel('Accuracy', fontsize=12)\n",
    "axes[0].grid(True, alpha=0.3)\n",
    "axes[0].legend()\n",
    "\n",
    "# Plot training and validation loss\n",
    "axes[1].plot(history.history['loss'], label='Train Loss', color='green', linestyle='-', marker='x', markersize=6)\n",
    "axes[1].plot(history.history['val_loss'], label='Validation Loss', color='red', linestyle='--', marker='^', markersize=6)\n",
    "axes[1].set_title('Model Loss', fontsize=14, fontweight='bold')\n",
    "axes[1].set_xlabel('Epochs', fontsize=12)\n",
    "axes[1].set_ylabel('Loss', fontsize=12)\n",
    "axes[1].grid(True, alpha=0.3)\n",
    "axes[1].legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a0e79a2",
   "metadata": {
    "papermill": {
     "duration": 0.037566,
     "end_time": "2024-12-14T11:15:34.989409",
     "exception": false,
     "start_time": "2024-12-14T11:15:34.951843",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ac453ea5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:15:35.068325Z",
     "iopub.status.busy": "2024-12-14T11:15:35.067509Z",
     "iopub.status.idle": "2024-12-14T11:15:35.631363Z",
     "shell.execute_reply": "2024-12-14T11:15:35.630433Z"
    },
    "papermill": {
     "duration": 0.605072,
     "end_time": "2024-12-14T11:15:35.633121",
     "exception": false,
     "start_time": "2024-12-14T11:15:35.028049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9890 - loss: 0.0267\n",
      "Validation Accuracy: 0.9900\n"
     ]
    }
   ],
   "source": [
    "val_loss, val_accuracy = model.evaluate(X_val, y_val)\n",
    "\n",
    "# Print the validation accuracy\n",
    "print(f\"Validation Accuracy: {val_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff81bd10",
   "metadata": {
    "papermill": {
     "duration": 0.040967,
     "end_time": "2024-12-14T11:15:35.713214",
     "exception": false,
     "start_time": "2024-12-14T11:15:35.672247",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Making predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "33f78210",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T11:15:35.793241Z",
     "iopub.status.busy": "2024-12-14T11:15:35.792874Z",
     "iopub.status.idle": "2024-12-14T11:15:38.245516Z",
     "shell.execute_reply": "2024-12-14T11:15:38.244572Z"
    },
    "papermill": {
     "duration": 2.495878,
     "end_time": "2024-12-14T11:15:38.247199",
     "exception": false,
     "start_time": "2024-12-14T11:15:35.751321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step\n",
      "Submission file saved as 'submission.csv'\n"
     ]
    }
   ],
   "source": [
    "\n",
    "test_normalized = test / 255.0\n",
    "test_normalized = test_normalized.values.reshape(-1, 28, 28, 1)\n",
    "\n",
    "predictions = np.argmax(model.predict(test_normalized), axis=1)\n",
    "\n",
    "submission = pd.DataFrame({'ImageId': range(1, len(predictions) + 1), 'Label': predictions})\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "\n",
    "print(\"Submission file saved as 'submission.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c338f76",
   "metadata": {
    "papermill": {
     "duration": 0.039258,
     "end_time": "2024-12-14T11:15:38.363194",
     "exception": false,
     "start_time": "2024-12-14T11:15:38.323936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30787,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 103.647689,
   "end_time": "2024-12-14T11:15:41.224194",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-12-14T11:13:57.576505",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
