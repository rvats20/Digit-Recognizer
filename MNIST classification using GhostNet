{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Modules import","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as F\n\nimport torchvision\nfrom torchvision.transforms import v2\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport time\nimport math","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:09:59.522248Z","iopub.execute_input":"2024-11-18T05:09:59.522669Z","iopub.status.idle":"2024-11-18T05:10:04.942919Z","shell.execute_reply.started":"2024-11-18T05:09:59.522619Z","shell.execute_reply":"2024-11-18T05:10:04.941916Z"}},"outputs":[],"execution_count":1},{"cell_type":"markdown","source":"# Data preparation","metadata":{}},{"cell_type":"code","source":"class MNISTDataset(Dataset):\n    def __init__(self, datapath, transform=None, train=True):\n        super().__init__()\n        _data = pd.read_csv(datapath)\n        self.transform = transform\n        self.init_transform = v2.Compose([\n            v2.ToImage(),\n            v2.ToDtype(torch.float64, scale=True)\n        ])\n        self.train = train\n        if train:\n            self.data = _data.iloc[:, 1:].to_numpy().astype('float64') / 255.\n            self.labels = _data.iloc[:, 0]\n        else:\n            self.data = _data.to_numpy().astype('float64') / 255.\n\n\n    def __getitem__(self, idx):\n        img = self.data[idx].reshape(28, 28)\n        img = self.init_transform(img)\n        if self.transform:\n            img = self.transform(img)\n        img = torch.cat([img] * 3, axis=0)\n        if self.train:\n            label = self.labels.iloc[idx]\n            label = F.one_hot(torch.tensor(label), num_classes=10)\n            return img, label\n        return img\n\n    def __len__(self):\n        return len(self.data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:04.944704Z","iopub.execute_input":"2024-11-18T05:10:04.945228Z","iopub.status.idle":"2024-11-18T05:10:04.954789Z","shell.execute_reply.started":"2024-11-18T05:10:04.945182Z","shell.execute_reply":"2024-11-18T05:10:04.953888Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"transformations = {\"train\": v2.Compose([\n    v2.ToImage(),\n    v2.ToDtype(torch.float64, scale=True),\n    v2.RandomAffine(degrees=(-10, 10), translate=(0.2, 0.2)),\n    # v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomVerticalFlip(p=0.5),\n    v2.Resize(size=(224, 224)),\n    v2.Normalize(mean=[0.13], std=[0.31]),\n]), \"test\": v2.Compose([\n    v2.ToImage(),\n    v2.ToDtype(torch.float64, scale=True),\n    v2.Resize(size=(224, 224)),\n    v2.Normalize(mean=[0.13], std=[0.31]),\n])}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:04.956072Z","iopub.execute_input":"2024-11-18T05:10:04.956354Z","iopub.status.idle":"2024-11-18T05:10:04.977890Z","shell.execute_reply.started":"2024-11-18T05:10:04.956324Z","shell.execute_reply":"2024-11-18T05:10:04.977116Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"datapath = Path(\"/kaggle/input/digit-recognizer\")\nbatch_size = 32\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\ntrain_dataset = MNISTDataset(datapath / \"train.csv\", transformations[\"train\"])\ntest_dataset = MNISTDataset(datapath / \"test.csv\", transformations[\"test\"], train=False)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:04.979755Z","iopub.execute_input":"2024-11-18T05:10:04.980013Z","iopub.status.idle":"2024-11-18T05:10:10.580731Z","shell.execute_reply.started":"2024-11-18T05:10:04.979984Z","shell.execute_reply":"2024-11-18T05:10:10.579934Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def train(model, dataloader, loss_fn, optimizer, scheduler, num_epochs, last_epochs=0):\n    size = len(dataloader.dataset)\n    \n    def train_epoch():\n        for batch, (X, y) in enumerate(dataloader):\n            X, y = X.to(device).float(), y.to(device).float()\n        \n            pred = model(X)\n            loss = loss_fn(pred, y)\n            \n            accuracy = (pred.argmax(dim=1) == y.argmax(dim=1)).sum().item() / y.size(0)\n    \n            loss.backward()\n            optimizer.step()\n            scheduler.step()\n            optimizer.zero_grad()\n        \n            if batch % 100 == 0:\n                loss, current= loss.item(), (batch + 1) * len(X)\n                print(f\"loss: {loss:>7f}  accuracy: {accuracy:.3f}  [{current:>5d}/{size:>5d}]\")\n\n    \n    model.train()\n    for epoch in range(num_epochs - last_epochs):\n        print(f'Epoch {epoch + 1}/{num_epochs}')\n        print('-' * 10)\n        train_epoch()\n\n    if last_epochs:\n        for param in model.parameters():\n            param.requires_grad = True\n    \n    for epoch in range(last_epochs):\n        print(f'Epoch {num_epochs + epoch + 1}/{num_epochs}')\n        print('-' * 10)\n        train_epoch()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:10.581825Z","iopub.execute_input":"2024-11-18T05:10:10.582127Z","iopub.status.idle":"2024-11-18T05:10:10.592457Z","shell.execute_reply.started":"2024-11-18T05:10:10.582096Z","shell.execute_reply":"2024-11-18T05:10:10.591531Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def predict(model, dataloader):\n    model = model.to(device)\n    size = len(dataloader.dataset)\n    predictions = []\n    model.eval()\n    for batch, X in enumerate(dataloader):\n        X = X.to(device).float()\n        \n        pred = model(X).argmax(dim=1)\n        predictions.append(pred)\n        if batch % 100 == 0:\n            print(f\"[{batch}/{math.ceil(size / 32)}]\")\n    return predictions","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:10.593904Z","iopub.execute_input":"2024-11-18T05:10:10.594574Z","iopub.status.idle":"2024-11-18T05:10:10.605616Z","shell.execute_reply.started":"2024-11-18T05:10:10.594520Z","shell.execute_reply":"2024-11-18T05:10:10.604874Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"model = torch.hub.load('huawei-noah/ghostnet', 'ghostnet_1x', pretrained=True)\n\nfor param in model.parameters():\n    param.requires_grad = False\n\nmodel.classifier = nn.Linear(model.classifier.in_features, 10)\nmodel = model.to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:10.606884Z","iopub.execute_input":"2024-11-18T05:10:10.607342Z","iopub.status.idle":"2024-11-18T05:10:23.804664Z","shell.execute_reply.started":"2024-11-18T05:10:10.607300Z","shell.execute_reply":"2024-11-18T05:10:23.803767Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/hub.py:295: UserWarning: You are about to download and run code from an untrusted repository. In a future release, this won't be allowed. To add the repository to your trusted list, change the command to {calling_fn}(..., trust_repo=False) and a command prompt will appear asking for an explicit confirmation of trust, or load(..., trust_repo=True), which will assume that the prompt is to be answered with 'yes'. You can also use load(..., trust_repo='check') which will only prompt for confirmation if the repo is not already trusted. This will eventually be the default behaviour\n  warnings.warn(\nDownloading: \"https://github.com/huawei-noah/ghostnet/zipball/master\" to /root/.cache/torch/hub/master.zip\nDownloading: \"https://github.com/huawei-noah/ghostnet/raw/master/ghostnet_pytorch/models/state_dict_73.98.pth\" to /root/.cache/torch/hub/checkpoints/state_dict_73.98.pth\n100%|██████████| 20.0M/20.0M [00:00<00:00, 44.7MB/s]\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"epochs = 10\nlr = 1e-3\nsteps_per_epoch = math.ceil(len(train_dataset) / batch_size)\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = optim.NAdam(model.parameters(), lr=lr)\nscheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=lr, epochs=epochs, steps_per_epoch=steps_per_epoch)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:23.806039Z","iopub.execute_input":"2024-11-18T05:10:23.807070Z","iopub.status.idle":"2024-11-18T05:10:23.814537Z","shell.execute_reply.started":"2024-11-18T05:10:23.807031Z","shell.execute_reply":"2024-11-18T05:10:23.813560Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"train(model, train_dataloader, loss_fn, optimizer, scheduler, epochs, last_epochs=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:10:23.815798Z","iopub.execute_input":"2024-11-18T05:10:23.816092Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n----------\nloss: 2.351006  accuracy: 0.000  [   32/42000]\nloss: 2.255409  accuracy: 0.250  [ 3232/42000]\nloss: 2.158478  accuracy: 0.250  [ 6432/42000]\nloss: 1.973361  accuracy: 0.625  [ 9632/42000]\nloss: 1.882491  accuracy: 0.750  [12832/42000]\nloss: 1.775950  accuracy: 0.719  [16032/42000]\nloss: 1.726998  accuracy: 0.688  [19232/42000]\nloss: 1.703457  accuracy: 0.562  [22432/42000]\nloss: 1.576972  accuracy: 0.594  [25632/42000]\nloss: 1.372919  accuracy: 0.750  [28832/42000]\nloss: 1.153458  accuracy: 0.750  [32032/42000]\nloss: 1.145341  accuracy: 0.750  [35232/42000]\nloss: 1.092639  accuracy: 0.812  [38432/42000]\nloss: 1.047626  accuracy: 0.719  [41632/42000]\nEpoch 2/10\n----------\nloss: 1.055821  accuracy: 0.812  [   32/42000]\nloss: 0.912929  accuracy: 0.844  [ 3232/42000]\nloss: 0.735711  accuracy: 0.844  [ 6432/42000]\nloss: 1.016209  accuracy: 0.688  [ 9632/42000]\nloss: 0.806126  accuracy: 0.719  [12832/42000]\nloss: 0.664735  accuracy: 0.875  [16032/42000]\nloss: 0.662500  accuracy: 0.781  [19232/42000]\nloss: 0.785989  accuracy: 0.812  [22432/42000]\nloss: 0.447545  accuracy: 0.906  [25632/42000]\nloss: 0.649942  accuracy: 0.875  [28832/42000]\nloss: 0.773897  accuracy: 0.844  [32032/42000]\nloss: 0.730399  accuracy: 0.750  [35232/42000]\nloss: 0.571307  accuracy: 0.844  [38432/42000]\nloss: 0.574747  accuracy: 0.812  [41632/42000]\nEpoch 3/10\n----------\nloss: 0.719351  accuracy: 0.750  [   32/42000]\nloss: 0.560040  accuracy: 0.781  [ 3232/42000]\nloss: 0.375122  accuracy: 0.906  [ 6432/42000]\nloss: 0.467607  accuracy: 0.938  [ 9632/42000]\nloss: 0.545511  accuracy: 0.812  [12832/42000]\nloss: 0.515668  accuracy: 0.844  [16032/42000]\nloss: 0.542226  accuracy: 0.781  [19232/42000]\nloss: 0.551421  accuracy: 0.844  [22432/42000]\nloss: 0.418428  accuracy: 0.875  [25632/42000]\nloss: 0.635219  accuracy: 0.844  [28832/42000]\nloss: 0.371290  accuracy: 0.781  [32032/42000]\nloss: 0.545527  accuracy: 0.812  [35232/42000]\nloss: 0.588662  accuracy: 0.781  [38432/42000]\nloss: 0.295867  accuracy: 0.875  [41632/42000]\nEpoch 4/10\n----------\nloss: 0.582034  accuracy: 0.812  [   32/42000]\nloss: 0.288428  accuracy: 0.906  [ 3232/42000]\nloss: 0.585866  accuracy: 0.844  [ 6432/42000]\nloss: 0.465089  accuracy: 0.906  [ 9632/42000]\nloss: 0.440203  accuracy: 0.875  [12832/42000]\nloss: 0.426215  accuracy: 0.812  [16032/42000]\nloss: 0.575067  accuracy: 0.781  [19232/42000]\nloss: 0.371556  accuracy: 0.875  [22432/42000]\nloss: 0.375791  accuracy: 0.844  [25632/42000]\nloss: 0.713344  accuracy: 0.812  [28832/42000]\nloss: 0.262055  accuracy: 0.969  [32032/42000]\nloss: 0.559518  accuracy: 0.781  [35232/42000]\nloss: 0.271216  accuracy: 0.906  [38432/42000]\nloss: 0.514923  accuracy: 0.906  [41632/42000]\nEpoch 5/10\n----------\nloss: 0.164759  accuracy: 0.969  [   32/42000]\nloss: 0.537081  accuracy: 0.781  [ 3232/42000]\nloss: 0.325022  accuracy: 0.938  [ 6432/42000]\nloss: 0.261253  accuracy: 0.938  [ 9632/42000]\nloss: 0.240008  accuracy: 0.938  [12832/42000]\nloss: 0.422774  accuracy: 0.875  [16032/42000]\nloss: 0.320430  accuracy: 0.875  [19232/42000]\nloss: 0.625943  accuracy: 0.781  [22432/42000]\nloss: 0.278175  accuracy: 0.906  [25632/42000]\nloss: 0.372805  accuracy: 0.844  [28832/42000]\nloss: 0.343328  accuracy: 0.875  [32032/42000]\nloss: 0.228866  accuracy: 0.969  [35232/42000]\nloss: 0.260854  accuracy: 0.969  [38432/42000]\nloss: 0.494998  accuracy: 0.875  [41632/42000]\nEpoch 11/10\n----------\nloss: 0.334004  accuracy: 0.875  [   32/42000]\nloss: 0.166782  accuracy: 0.938  [ 3232/42000]\nloss: 0.054163  accuracy: 0.969  [ 6432/42000]\nloss: 0.054558  accuracy: 0.969  [ 9632/42000]\nloss: 0.121366  accuracy: 0.969  [12832/42000]\nloss: 0.217795  accuracy: 0.938  [16032/42000]\nloss: 0.219529  accuracy: 0.969  [19232/42000]\nloss: 0.002931  accuracy: 1.000  [22432/42000]\nloss: 0.006267  accuracy: 1.000  [25632/42000]\nloss: 0.144665  accuracy: 0.969  [28832/42000]\nloss: 0.047875  accuracy: 0.969  [32032/42000]\nloss: 0.003845  accuracy: 1.000  [35232/42000]\nloss: 0.015875  accuracy: 1.000  [38432/42000]\nloss: 0.004612  accuracy: 1.000  [41632/42000]\nEpoch 12/10\n----------\nloss: 0.056958  accuracy: 0.969  [   32/42000]\nloss: 0.065672  accuracy: 0.969  [ 3232/42000]\nloss: 0.401462  accuracy: 0.938  [ 6432/42000]\nloss: 0.011180  accuracy: 1.000  [ 9632/42000]\nloss: 0.001525  accuracy: 1.000  [12832/42000]\nloss: 0.002448  accuracy: 1.000  [16032/42000]\nloss: 0.180634  accuracy: 0.969  [19232/42000]\nloss: 0.035028  accuracy: 0.969  [22432/42000]\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"preds = predict(model, test_dataloader)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from functools import reduce, partial\nimport numpy as np\n\nconcat = partial(np.concatenate, axis=0)\nmmm = [x.cpu().numpy() for x in preds]\npredictions = reduce(lambda x, y: concat((x, y)), mmm)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = {\"ImageId\": np.arange(1, len(predictions) + 1),\n             \"Label\": predictions}\n\nsubmission = pd.DataFrame(submission)\nsubmission = submission.set_index(\"ImageId\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission.to_csv(\"/kaggle/working/submission.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}