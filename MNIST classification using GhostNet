{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Modules import","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport torch.nn.functional as F\n\nimport torchvision\nfrom torchvision.transforms import v2\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport time\nimport math","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:21.768667Z","iopub.execute_input":"2024-11-18T05:38:21.769044Z","iopub.status.idle":"2024-11-18T05:38:21.774710Z","shell.execute_reply.started":"2024-11-18T05:38:21.769007Z","shell.execute_reply":"2024-11-18T05:38:21.773812Z"}},"outputs":[],"execution_count":15},{"cell_type":"markdown","source":"# Data preparation","metadata":{}},{"cell_type":"code","source":"class MNISTDataset(Dataset):\n    def __init__(self, datapath, transform=None, train=True):\n        super().__init__()\n        _data = pd.read_csv(datapath)\n        self.transform = transform\n        self.init_transform = v2.Compose([\n            v2.ToImage(),\n            v2.ToDtype(torch.float64, scale=True)\n        ])\n        self.train = train\n        if train:\n            self.data = _data.iloc[:, 1:].to_numpy().astype('float64') / 255.\n            self.labels = _data.iloc[:, 0]\n        else:\n            self.data = _data.to_numpy().astype('float64') / 255.\n\n\n    def __getitem__(self, idx):\n        img = self.data[idx].reshape(28, 28)\n        img = self.init_transform(img)\n        if self.transform:\n            img = self.transform(img)\n        img = torch.cat([img] * 3, axis=0)\n        if self.train:\n            label = self.labels.iloc[idx]\n            label = F.one_hot(torch.tensor(label), num_classes=10)\n            return img, label\n        return img\n\n    def __len__(self):\n        return len(self.data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:21.776204Z","iopub.execute_input":"2024-11-18T05:38:21.776549Z","iopub.status.idle":"2024-11-18T05:38:21.787610Z","shell.execute_reply.started":"2024-11-18T05:38:21.776518Z","shell.execute_reply":"2024-11-18T05:38:21.786761Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"transformations = {\"train\": v2.Compose([\n    v2.ToImage(),\n    v2.ToDtype(torch.float64, scale=True),\n    v2.RandomAffine(degrees=(-10, 10), translate=(0.2, 0.2)),\n    # v2.RandomHorizontalFlip(p=0.5),\n    # v2.RandomVerticalFlip(p=0.5),\n    v2.Resize(size=(224, 224)),\n    v2.Normalize(mean=[0.13], std=[0.31]),\n]), \"test\": v2.Compose([\n    v2.ToImage(),\n    v2.ToDtype(torch.float64, scale=True),\n    v2.Resize(size=(224, 224)),\n    v2.Normalize(mean=[0.13], std=[0.31]),\n])}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:21.788598Z","iopub.execute_input":"2024-11-18T05:38:21.788867Z","iopub.status.idle":"2024-11-18T05:38:21.798778Z","shell.execute_reply.started":"2024-11-18T05:38:21.788838Z","shell.execute_reply":"2024-11-18T05:38:21.797845Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"datapath = Path(\"/kaggle/input/digit-recognizer\")\nbatch_size = 32\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\ntrain_dataset = MNISTDataset(datapath / \"train.csv\", transformations[\"train\"])\ntest_dataset = MNISTDataset(datapath / \"test.csv\", transformations[\"test\"], train=False)\n\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:21.801034Z","iopub.execute_input":"2024-11-18T05:38:21.801335Z","iopub.status.idle":"2024-11-18T05:38:26.418608Z","shell.execute_reply.started":"2024-11-18T05:38:21.801305Z","shell.execute_reply":"2024-11-18T05:38:26.417806Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"def train(model, dataloader, loss_fn, optimizer, scheduler, num_epochs, last_epochs=0):\n    size = len(dataloader.dataset)\n    \n    def train_epoch():\n        for batch, (X, y) in enumerate(dataloader):\n            X, y = X.to(device).float(), y.to(device).float()\n        \n            pred = model(X)\n            loss = loss_fn(pred, y)\n            \n            accuracy = (pred.argmax(dim=1) == y.argmax(dim=1)).sum().item() / y.size(0)\n    \n            loss.backward()\n            optimizer.step()\n            scheduler.step()\n            optimizer.zero_grad()\n        \n            if batch % 100 == 0:\n                loss, current= loss.item(), (batch + 1) * len(X)\n                print(f\"loss: {loss:>7f}  accuracy: {accuracy:.3f}  [{current:>5d}/{size:>5d}]\")\n\n    \n    model.train()\n    for epoch in range(num_epochs - last_epochs):\n        print(f'Epoch {epoch + 1}/{num_epochs}')\n        print('-' * 10)\n        train_epoch()\n\n    if last_epochs:\n        for param in model.parameters():\n            param.requires_grad = True\n    \n    for epoch in range(last_epochs):\n        print(f'Epoch {num_epochs + epoch + 1}/{num_epochs}')\n        print('-' * 10)\n        train_epoch()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:26.419655Z","iopub.execute_input":"2024-11-18T05:38:26.419945Z","iopub.status.idle":"2024-11-18T05:38:26.429886Z","shell.execute_reply.started":"2024-11-18T05:38:26.419915Z","shell.execute_reply":"2024-11-18T05:38:26.428956Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"def predict(model, dataloader):\n    model = model.to(device)\n    size = len(dataloader.dataset)\n    predictions = []\n    model.eval()\n    for batch, X in enumerate(dataloader):\n        X = X.to(device).float()\n        \n        pred = model(X).argmax(dim=1)\n        predictions.append(pred)\n        if batch % 100 == 0:\n            print(f\"[{batch}/{math.ceil(size / 32)}]\")\n    return predictions","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:26.431347Z","iopub.execute_input":"2024-11-18T05:38:26.432025Z","iopub.status.idle":"2024-11-18T05:38:26.443662Z","shell.execute_reply.started":"2024-11-18T05:38:26.431983Z","shell.execute_reply":"2024-11-18T05:38:26.442786Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"model = torch.hub.load('huawei-noah/ghostnet', 'ghostnet_1x', pretrained=True)\n\nfor param in model.parameters():\n    param.requires_grad = False\n\nmodel.classifier = nn.Linear(model.classifier.in_features, 10)\nmodel = model.to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:26.444900Z","iopub.execute_input":"2024-11-18T05:38:26.445825Z","iopub.status.idle":"2024-11-18T05:38:27.364499Z","shell.execute_reply.started":"2024-11-18T05:38:26.445792Z","shell.execute_reply":"2024-11-18T05:38:27.363465Z"}},"outputs":[{"name":"stderr","text":"Using cache found in /root/.cache/torch/hub/huawei-noah_ghostnet_master\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"epochs = 10\nlr = 1e-3\nsteps_per_epoch = math.ceil(len(train_dataset) / batch_size)\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = optim.NAdam(model.parameters(), lr=lr)\nscheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=lr, epochs=epochs, steps_per_epoch=steps_per_epoch)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:27.365838Z","iopub.execute_input":"2024-11-18T05:38:27.366235Z","iopub.status.idle":"2024-11-18T05:38:27.375645Z","shell.execute_reply.started":"2024-11-18T05:38:27.366190Z","shell.execute_reply":"2024-11-18T05:38:27.374692Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"train(model, train_dataloader, loss_fn, optimizer, scheduler, epochs, last_epochs=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:38:27.377360Z","iopub.execute_input":"2024-11-18T05:38:27.377891Z","iopub.status.idle":"2024-11-18T05:58:17.473079Z","shell.execute_reply.started":"2024-11-18T05:38:27.377848Z","shell.execute_reply":"2024-11-18T05:58:17.472019Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/10\n----------\nloss: 2.324758  accuracy: 0.062  [   32/42000]\nloss: 2.222935  accuracy: 0.344  [ 3232/42000]\nloss: 2.188787  accuracy: 0.344  [ 6432/42000]\nloss: 2.065331  accuracy: 0.406  [ 9632/42000]\nloss: 1.936045  accuracy: 0.719  [12832/42000]\nloss: 1.758504  accuracy: 0.719  [16032/42000]\nloss: 1.947785  accuracy: 0.438  [19232/42000]\nloss: 1.635985  accuracy: 0.625  [22432/42000]\nloss: 1.475006  accuracy: 0.719  [25632/42000]\nloss: 1.491304  accuracy: 0.719  [28832/42000]\nloss: 1.228108  accuracy: 0.688  [32032/42000]\nloss: 1.178546  accuracy: 0.750  [35232/42000]\nloss: 1.063046  accuracy: 0.750  [38432/42000]\nloss: 0.995789  accuracy: 0.781  [41632/42000]\nEpoch 2/10\n----------\nloss: 0.913835  accuracy: 0.812  [   32/42000]\nloss: 0.938072  accuracy: 0.750  [ 3232/42000]\nloss: 0.748575  accuracy: 0.812  [ 6432/42000]\nloss: 0.750115  accuracy: 0.781  [ 9632/42000]\nloss: 0.679349  accuracy: 0.844  [12832/42000]\nloss: 0.797309  accuracy: 0.844  [16032/42000]\nloss: 0.690648  accuracy: 0.812  [19232/42000]\nloss: 0.513221  accuracy: 0.875  [22432/42000]\nloss: 0.722542  accuracy: 0.844  [25632/42000]\nloss: 0.791003  accuracy: 0.750  [28832/42000]\nloss: 0.842062  accuracy: 0.688  [32032/42000]\nloss: 0.733740  accuracy: 0.719  [35232/42000]\nloss: 0.420661  accuracy: 0.906  [38432/42000]\nloss: 0.450024  accuracy: 0.938  [41632/42000]\nEpoch 3/10\n----------\nloss: 0.608169  accuracy: 0.844  [   32/42000]\nloss: 0.523710  accuracy: 0.844  [ 3232/42000]\nloss: 0.451001  accuracy: 0.750  [ 6432/42000]\nloss: 0.499703  accuracy: 0.812  [ 9632/42000]\nloss: 0.371894  accuracy: 0.875  [12832/42000]\nloss: 0.613363  accuracy: 0.781  [16032/42000]\nloss: 0.486595  accuracy: 0.906  [19232/42000]\nloss: 0.277876  accuracy: 0.969  [22432/42000]\nloss: 0.428300  accuracy: 0.844  [25632/42000]\nloss: 0.410362  accuracy: 0.812  [28832/42000]\nloss: 0.574833  accuracy: 0.844  [32032/42000]\nloss: 0.326247  accuracy: 0.906  [35232/42000]\nloss: 0.502641  accuracy: 0.906  [38432/42000]\nloss: 0.458909  accuracy: 0.906  [41632/42000]\nEpoch 4/10\n----------\nloss: 0.701924  accuracy: 0.750  [   32/42000]\nloss: 0.402595  accuracy: 0.875  [ 3232/42000]\nloss: 0.485152  accuracy: 0.812  [ 6432/42000]\nloss: 0.487962  accuracy: 0.781  [ 9632/42000]\nloss: 0.351268  accuracy: 0.875  [12832/42000]\nloss: 0.302493  accuracy: 0.938  [16032/42000]\nloss: 0.403633  accuracy: 0.906  [19232/42000]\nloss: 0.437469  accuracy: 0.781  [22432/42000]\nloss: 0.502856  accuracy: 0.875  [25632/42000]\nloss: 0.522573  accuracy: 0.844  [28832/42000]\nloss: 0.631059  accuracy: 0.875  [32032/42000]\nloss: 0.378509  accuracy: 0.875  [35232/42000]\nloss: 0.520835  accuracy: 0.875  [38432/42000]\nloss: 0.113273  accuracy: 0.969  [41632/42000]\nEpoch 5/10\n----------\nloss: 0.268689  accuracy: 0.938  [   32/42000]\nloss: 0.237631  accuracy: 0.906  [ 3232/42000]\nloss: 0.187474  accuracy: 1.000  [ 6432/42000]\nloss: 0.261321  accuracy: 0.938  [ 9632/42000]\nloss: 0.405745  accuracy: 0.812  [12832/42000]\nloss: 0.658309  accuracy: 0.781  [16032/42000]\nloss: 0.380742  accuracy: 0.844  [19232/42000]\nloss: 0.298446  accuracy: 0.906  [22432/42000]\nloss: 0.265791  accuracy: 0.938  [25632/42000]\nloss: 0.376041  accuracy: 0.906  [28832/42000]\nloss: 0.390030  accuracy: 0.875  [32032/42000]\nloss: 0.348214  accuracy: 0.875  [35232/42000]\nloss: 0.524562  accuracy: 0.781  [38432/42000]\nloss: 0.592461  accuracy: 0.750  [41632/42000]\nEpoch 11/10\n----------\nloss: 0.596790  accuracy: 0.750  [   32/42000]\nloss: 0.192395  accuracy: 0.969  [ 3232/42000]\nloss: 0.369596  accuracy: 0.969  [ 6432/42000]\nloss: 0.147393  accuracy: 0.969  [ 9632/42000]\nloss: 0.089096  accuracy: 0.969  [12832/42000]\nloss: 0.044269  accuracy: 0.969  [16032/42000]\nloss: 0.009169  accuracy: 1.000  [19232/42000]\nloss: 0.002266  accuracy: 1.000  [22432/42000]\nloss: 0.049694  accuracy: 0.969  [25632/42000]\nloss: 0.001343  accuracy: 1.000  [28832/42000]\nloss: 0.003960  accuracy: 1.000  [32032/42000]\nloss: 0.029249  accuracy: 1.000  [35232/42000]\nloss: 0.074583  accuracy: 0.969  [38432/42000]\nloss: 0.002436  accuracy: 1.000  [41632/42000]\nEpoch 12/10\n----------\nloss: 0.004871  accuracy: 1.000  [   32/42000]\nloss: 0.108377  accuracy: 0.969  [ 3232/42000]\nloss: 0.012741  accuracy: 1.000  [ 6432/42000]\nloss: 0.003014  accuracy: 1.000  [ 9632/42000]\nloss: 0.000239  accuracy: 1.000  [12832/42000]\nloss: 0.333349  accuracy: 0.938  [16032/42000]\nloss: 0.000759  accuracy: 1.000  [19232/42000]\nloss: 0.001534  accuracy: 1.000  [22432/42000]\nloss: 0.038416  accuracy: 0.969  [25632/42000]\nloss: 0.000266  accuracy: 1.000  [28832/42000]\nloss: 0.098179  accuracy: 0.969  [32032/42000]\nloss: 0.033390  accuracy: 0.969  [35232/42000]\nloss: 0.001752  accuracy: 1.000  [38432/42000]\nloss: 0.003786  accuracy: 1.000  [41632/42000]\nEpoch 13/10\n----------\nloss: 0.011665  accuracy: 1.000  [   32/42000]\nloss: 0.011977  accuracy: 1.000  [ 3232/42000]\nloss: 0.004127  accuracy: 1.000  [ 6432/42000]\nloss: 0.001842  accuracy: 1.000  [ 9632/42000]\nloss: 0.000123  accuracy: 1.000  [12832/42000]\nloss: 0.005227  accuracy: 1.000  [16032/42000]\nloss: 0.000426  accuracy: 1.000  [19232/42000]\nloss: 0.004332  accuracy: 1.000  [22432/42000]\nloss: 0.006968  accuracy: 1.000  [25632/42000]\nloss: 0.014343  accuracy: 1.000  [28832/42000]\nloss: 0.006606  accuracy: 1.000  [32032/42000]\nloss: 0.004711  accuracy: 1.000  [35232/42000]\nloss: 0.004184  accuracy: 1.000  [38432/42000]\nloss: 0.065751  accuracy: 0.969  [41632/42000]\nEpoch 14/10\n----------\nloss: 0.014130  accuracy: 1.000  [   32/42000]\nloss: 0.001119  accuracy: 1.000  [ 3232/42000]\nloss: 0.005293  accuracy: 1.000  [ 6432/42000]\nloss: 0.000324  accuracy: 1.000  [ 9632/42000]\nloss: 0.008599  accuracy: 1.000  [12832/42000]\nloss: 0.001318  accuracy: 1.000  [16032/42000]\nloss: 0.001092  accuracy: 1.000  [19232/42000]\nloss: 0.000325  accuracy: 1.000  [22432/42000]\nloss: 0.000234  accuracy: 1.000  [25632/42000]\nloss: 0.003368  accuracy: 1.000  [28832/42000]\nloss: 0.292736  accuracy: 0.969  [32032/42000]\nloss: 0.000637  accuracy: 1.000  [35232/42000]\nloss: 0.012888  accuracy: 1.000  [38432/42000]\nloss: 0.000392  accuracy: 1.000  [41632/42000]\nEpoch 15/10\n----------\nloss: 0.076317  accuracy: 0.969  [   32/42000]\nloss: 0.000320  accuracy: 1.000  [ 3232/42000]\nloss: 0.010785  accuracy: 1.000  [ 6432/42000]\nloss: 0.112046  accuracy: 0.969  [ 9632/42000]\nloss: 0.021884  accuracy: 1.000  [12832/42000]\nloss: 0.000053  accuracy: 1.000  [16032/42000]\nloss: 0.013558  accuracy: 1.000  [19232/42000]\nloss: 0.000374  accuracy: 1.000  [22432/42000]\nloss: 0.000088  accuracy: 1.000  [25632/42000]\nloss: 0.029092  accuracy: 0.969  [28832/42000]\nloss: 0.000866  accuracy: 1.000  [32032/42000]\nloss: 0.011879  accuracy: 1.000  [35232/42000]\nloss: 0.000860  accuracy: 1.000  [38432/42000]\nloss: 0.000478  accuracy: 1.000  [41632/42000]\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"preds = predict(model, test_dataloader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:58:17.476225Z","iopub.execute_input":"2024-11-18T05:58:17.476577Z","iopub.status.idle":"2024-11-18T05:59:02.643483Z","shell.execute_reply.started":"2024-11-18T05:58:17.476542Z","shell.execute_reply":"2024-11-18T05:59:02.642550Z"}},"outputs":[{"name":"stdout","text":"[0/875]\n[100/875]\n[200/875]\n[300/875]\n[400/875]\n[500/875]\n[600/875]\n[700/875]\n[800/875]\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"from functools import reduce, partial\nimport numpy as np\n\nconcat = partial(np.concatenate, axis=0)\nmmm = [x.cpu().numpy() for x in preds]\npredictions = reduce(lambda x, y: concat((x, y)), mmm)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:59:02.645072Z","iopub.execute_input":"2024-11-18T05:59:02.645481Z","iopub.status.idle":"2024-11-18T05:59:02.675707Z","shell.execute_reply.started":"2024-11-18T05:59:02.645436Z","shell.execute_reply":"2024-11-18T05:59:02.674924Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"predictions.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:59:02.676808Z","iopub.execute_input":"2024-11-18T05:59:02.677168Z","iopub.status.idle":"2024-11-18T05:59:02.683357Z","shell.execute_reply.started":"2024-11-18T05:59:02.677125Z","shell.execute_reply":"2024-11-18T05:59:02.682224Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"(28000,)"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"submission = {\"ImageId\": np.arange(1, len(predictions) + 1),\n             \"Label\": predictions}\n\nsubmission = pd.DataFrame(submission)\nsubmission = submission.set_index(\"ImageId\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:59:02.684974Z","iopub.execute_input":"2024-11-18T05:59:02.685534Z","iopub.status.idle":"2024-11-18T05:59:02.693532Z","shell.execute_reply.started":"2024-11-18T05:59:02.685481Z","shell.execute_reply":"2024-11-18T05:59:02.692312Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"submission.to_csv(\"/kaggle/working/submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-18T05:59:02.694936Z","iopub.execute_input":"2024-11-18T05:59:02.695821Z","iopub.status.idle":"2024-11-18T05:59:02.739028Z","shell.execute_reply.started":"2024-11-18T05:59:02.695772Z","shell.execute_reply":"2024-11-18T05:59:02.738041Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}