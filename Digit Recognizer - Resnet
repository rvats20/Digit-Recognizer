{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"},{"sourceId":111330,"sourceType":"modelInstanceVersion","modelInstanceId":93277,"modelId":117486}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Hyperparameter\nIS_TRAIN = False   # if you want to train again from the beginning, set IS_TRAIN = True\n\nNUM_EPOCHS = 50 \nBATCH_SIZE = 64\nLEARNING_RATE = 0.01 ","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:45:56.438937Z","iopub.execute_input":"2024-11-18T08:45:56.439271Z","iopub.status.idle":"2024-11-18T08:45:56.450656Z","shell.execute_reply.started":"2024-11-18T08:45:56.439244Z","shell.execute_reply":"2024-11-18T08:45:56.449614Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Import library","metadata":{}},{"cell_type":"code","source":"import random \nimport numpy as np \nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn \nimport torch.optim as optim\nfrom torchvision import transforms\nfrom torch.utils.data import DataLoader, Subset, DataLoader, Dataset, TensorDataset","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-18T08:45:56.461016Z","iopub.execute_input":"2024-11-18T08:45:56.461297Z","iopub.status.idle":"2024-11-18T08:46:02.763235Z","shell.execute_reply.started":"2024-11-18T08:45:56.461252Z","shell.execute_reply":"2024-11-18T08:46:02.762464Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Read and prepare data","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\ndf.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:02.764890Z","iopub.execute_input":"2024-11-18T08:46:02.765497Z","iopub.status.idle":"2024-11-18T08:46:06.226666Z","shell.execute_reply.started":"2024-11-18T08:46:02.765470Z","shell.execute_reply":"2024-11-18T08:46:06.225713Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def split_data(df, test_size=0.2):\n    X = df.iloc[:, 1:].values\n    y = df.iloc[:, 0].values\n    \n    indices = np.random.permutation(len(X))\n    split_index = int(len(X) * (1 - test_size))\n    \n    train_indices = indices[:split_index]\n    val_indices = indices[split_index:]\n    \n    X_train = X[train_indices]\n    y_train = y[train_indices]\n    X_val = X[val_indices]\n    y_val = y[val_indices]\n    \n    return X_train, y_train, X_val, y_val\n\nclass ResizedDigitDataset(Dataset):\n    def __init__(self, X, y):\n        self.X = X.reshape(-1, 28, 28).astype(np.uint8)   # Reshape hình ảnh về (28, 28)\n        self.y = y\n        self.transform = transforms.Compose([\n            transforms.ToPILImage(), \n            transforms.ToTensor(),\n            transforms.Normalize((0.1307,), (0.3081,))\n        ])\n    \n    def __len__(self):\n        return len(self.y)\n    \n    def __getitem__(self, idx):\n        image = self.X[idx]\n        label = self.y[idx]\n        image = self.transform(image) \n        return image, label\n\n# Chia dữ liệu và tạo dataset\nX_train, y_train, X_val, y_val = split_data(df)\ntrain_dataset = ResizedDigitDataset(X_train, y_train)\nval_dataset = ResizedDigitDataset(X_val, y_val)\n\ntrain_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(X_val.shape)\nprint(y_val.shape)\nfor data, target in train_loader:\n    print(data.shape)  \n    print(target.shape)\n    plt.imshow(data[0].reshape((28, 28)), cmap='gray')\n    print(target[0].item())\n    break","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:06.227706Z","iopub.execute_input":"2024-11-18T08:46:06.227991Z","iopub.status.idle":"2024-11-18T08:46:06.948151Z","shell.execute_reply.started":"2024-11-18T08:46:06.227967Z","shell.execute_reply":"2024-11-18T08:46:06.947228Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Hiển thị subplot 10x10 gồm 10 ảnh mỗi lớp từ 0 đến 9 \nnum_classes = 10\nnum_images_per_class = 10 \nclass_images = {i: [] for i in range(num_classes)}\n\nfor img, label in train_dataset:\n    if len(class_images[label])<num_images_per_class:\n        class_images[label].append(img)\n\nfig, axes = plt.subplots(nrows=num_classes, ncols=num_images_per_class, figsize=(12, 12))\nfig.suptitle('MNIST dataset - 10x10 Grid', fontsize=16)\n\nfor class_idx in range(num_classes):\n    for img_idx in range(num_images_per_class):\n        ax = axes[class_idx, img_idx]\n        img = class_images[class_idx][img_idx].numpy().squeeze()\n        ax.imshow(img, cmap='gray')\n        ax.axis('off')\n        \nplt.tight_layout()\nplt.subplots_adjust(top=0.95)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:06.949558Z","iopub.execute_input":"2024-11-18T08:46:06.949998Z","iopub.status.idle":"2024-11-18T08:46:16.224895Z","shell.execute_reply.started":"2024-11-18T08:46:06.949965Z","shell.execute_reply":"2024-11-18T08:46:16.224019Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model definition","metadata":{}},{"cell_type":"code","source":"# Tạo class block Resident \nclass block(nn.Module):\n    def __init__(self, in_channels, out_channels, identity_downsample=None, stride=1):\n        super(block, self).__init__()\n        self.expansion = 4 \n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0)\n        self.bn1 = nn.BatchNorm2d(out_channels)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=stride, padding=1)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        self.conv3 = nn.Conv2d(out_channels, out_channels*self.expansion, kernel_size=1, stride=1, padding=0)\n        self.bn3 = nn.BatchNorm2d(out_channels*self.expansion)\n        self.relu = nn.ReLU() \n        self.identyty_downsample = identity_downsample \n        \n    def forward(self, x):\n        identity = x \n        \n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.conv2(x)\n        x = self.bn2(x)\n        x = self.conv3(x)\n        x = self.bn3(x)\n        \n        if self.identyty_downsample is not None:\n            identity = self.identyty_downsample(identity)\n            \n        x += identity \n        x = self.relu(x)\n        return x ","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.228233Z","iopub.execute_input":"2024-11-18T08:46:16.228875Z","iopub.status.idle":"2024-11-18T08:46:16.238492Z","shell.execute_reply.started":"2024-11-18T08:46:16.228841Z","shell.execute_reply":"2024-11-18T08:46:16.237565Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Tạo class kiến trúc mạng ResNet \nclass ResNet(nn.Module):\n    def __init__(self, block, layers, image_channels, num_classes):\n        super(ResNet, self).__init__() \n        self.in_channels = 64\n        self.conv1 = nn.Conv2d(image_channels, 64, kernel_size=7, stride=2, padding=3)\n        self.bn1 = nn.BatchNorm2d(64)\n        self.relu = nn.ReLU()\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n        \n        # ResNet layers \n        self.layer1 = self._make_layer(block, layers[0], out_channels=64, stride=1)\n        self.layer2 = self._make_layer(block, layers[1], out_channels=128, stride=2)\n        self.layer3 = self._make_layer(block, layers[2], out_channels=256, stride=2)\n        self.layer4 = self._make_layer(block, layers[3], out_channels=512, stride=2)\n        \n        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n        self.fc = nn.Linear(512*4, num_classes)\n        \n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.bn1(x)\n        x = self.relu(x)\n        x = self.maxpool(x)\n        \n        x = self.layer1(x)\n        x = self.layer2(x)\n        x = self.layer3(x)\n        x = self.layer4(x)\n        \n        x = self.avgpool(x)\n        x = x.reshape(x.shape[0], -1)\n        x = self.fc(x) \n        return x \n        \n    def _make_layer(self, block, num_residual_blocks, out_channels, stride):\n        identity_downsample = None \n        layers = []\n        \n        if stride!=1 or self.in_channels != out_channels * 4:\n            identity_downsample = nn.Sequential(\n                nn.Conv2d(self.in_channels, out_channels*4, kernel_size=1, stride=stride),\n                nn.BatchNorm2d(out_channels*4),   \n            )\n        \n        layers.append(block(self.in_channels, out_channels, identity_downsample, stride))\n        self.in_channels = out_channels * 4 \n        \n        for i in range(num_residual_blocks):\n            layers.append(block(self.in_channels, out_channels))\n        return nn.Sequential(*layers)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.239791Z","iopub.execute_input":"2024-11-18T08:46:16.240327Z","iopub.status.idle":"2024-11-18T08:46:16.254540Z","shell.execute_reply.started":"2024-11-18T08:46:16.240295Z","shell.execute_reply":"2024-11-18T08:46:16.253679Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def ResNet50(img_channel=1, num_classe=10):\n    return ResNet(block, [3, 4, 6, 3], img_channel, num_classes)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.255898Z","iopub.execute_input":"2024-11-18T08:46:16.256180Z","iopub.status.idle":"2024-11-18T08:46:16.267591Z","shell.execute_reply.started":"2024-11-18T08:46:16.256158Z","shell.execute_reply":"2024-11-18T08:46:16.266776Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model training","metadata":{}},{"cell_type":"code","source":"def train(model, device, train_loader, optimizer, criterion):\n    model.train()  # Chuyển mô hình sang chế độ train\n    train_loss = 0.0\n    correct_train = 0\n\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target)\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        pred_train = output.argmax(dim=1, keepdim=True)\n        correct_train += pred_train.eq(target.view_as(pred_train)).sum().item()\n\n    train_loss /= len(train_loader)\n    train_accuracy = 100. * correct_train / len(train_loader.dataset)\n\n    return train_loss, train_accuracy","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.268598Z","iopub.execute_input":"2024-11-18T08:46:16.268889Z","iopub.status.idle":"2024-11-18T08:46:16.279907Z","shell.execute_reply.started":"2024-11-18T08:46:16.268867Z","shell.execute_reply":"2024-11-18T08:46:16.278990Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def evaluate(model, device, test_loader, criterion):\n    model.eval()  # Chuyển mô hình sang chế độ eval\n    test_loss = 0.0\n    correct_test = 0\n\n    with torch.no_grad():\n        for data, target in test_loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            test_loss += criterion(output, target).item()\n            pred_test = output.argmax(dim=1, keepdim=True)\n            correct_test += pred_test.eq(target.view_as(pred_test)).sum().item()\n\n    test_loss /= len(test_loader.dataset)\n    test_accuracy = 100. * correct_test / len(test_loader.dataset)\n\n    return test_loss, test_accuracy","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.281041Z","iopub.execute_input":"2024-11-18T08:46:16.281302Z","iopub.status.idle":"2024-11-18T08:46:16.289821Z","shell.execute_reply.started":"2024-11-18T08:46:16.281259Z","shell.execute_reply":"2024-11-18T08:46:16.288958Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Sử dụng GPU nếu có sẵn \ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nnet = ResNet50().to(device)\n\n# Định nghĩa hàm loss và optimizer \ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=LEARNING_RATE, momentum=0.9)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.290817Z","iopub.execute_input":"2024-11-18T08:46:16.291050Z","iopub.status.idle":"2024-11-18T08:46:16.754238Z","shell.execute_reply.started":"2024-11-18T08:46:16.291030Z","shell.execute_reply":"2024-11-18T08:46:16.753246Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"if IS_TRAIN:\n    train_losses = []\n    val_losses = []\n    train_accuracies = []\n    val_accuracies = []\n    best_accuracy = 0.0\n    best_model = None\n\n    for epoch in range(NUM_EPOCHS):\n        print(f'Start training epoch: {epoch+1}/{NUM_EPOCHS}')\n\n        # Gọi hàm train\n        epoch_train_loss, train_accuracy = train(net, device, train_loader, optimizer, criterion)\n        train_losses.append(epoch_train_loss)\n        train_accuracies.append(train_accuracy)\n\n        # Gọi hàm evaluate\n        val_loss, val_accuracy = evaluate(net, device, val_loader, criterion)\n        val_losses.append(val_loss)\n        val_accuracies.append(val_accuracy)\n\n        # Lưu mô hình tốt nhất\n        if val_accuracy > best_accuracy:\n            best_accuracy = val_accuracy\n            best_model = net.state_dict()\n\n        print(f'Epoch {epoch + 1}, Train Loss: {epoch_train_loss:.4f}, val Loss: {val_loss:.4f}, '\n              f'Train Accuracy: {train_accuracy:.2f}%, val Accuracy: {val_accuracy:.2f}%')\n\n    # Lưu mô hình tốt nhất\n    torch.save(best_model, 'best_model.pth')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.755474Z","iopub.execute_input":"2024-11-18T08:46:16.755762Z","iopub.status.idle":"2024-11-18T08:46:16.763819Z","shell.execute_reply.started":"2024-11-18T08:46:16.755739Z","shell.execute_reply":"2024-11-18T08:46:16.762902Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"if IS_TRAIN:\n    # Plotting the results\n    epochs = range(1, NUM_EPOCHS + 1)\n    plt.figure(figsize=(12, 5))\n\n    # Plot train and val loss\n    plt.subplot(1, 2, 1)\n    plt.plot(epochs, train_losses, 'r', label='Training loss')\n    plt.plot(epochs, val_losses, 'b', label='val loss')\n    plt.title('Training and val loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    # Plot train and val accuracy\n    plt.subplot(1, 2, 2)\n    plt.plot(epochs, train_accuracies, 'r', label='Training accuracy')\n    plt.plot(epochs, val_accuracies, 'b', label='val accuracy')\n    plt.title('Training and val accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n\n    plt.show()\n\n    # Save the best model\n    torch.save(best_model, 'best_model.pth')\n    print(f'Best model saved with accuracy: {best_accuracy:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.764853Z","iopub.execute_input":"2024-11-18T08:46:16.765179Z","iopub.status.idle":"2024-11-18T08:46:16.777905Z","shell.execute_reply.started":"2024-11-18T08:46:16.765148Z","shell.execute_reply":"2024-11-18T08:46:16.777178Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Tải mô hình đã lưu\nif IS_TRAIN:\n    model = ResNet50().to(device)\n    model.load_state_dict(torch.load('best_model.pth', map_location=device)) \n    model.eval()\nelse:\n    model = ResNet50().to(device)\n    model.load_state_dict(torch.load('/kaggle/input/resnet50_model/pytorch/default/1/best_model.pth', map_location=device)) \n    model.eval()\n    \nval_loss, val_accuracy = evaluate(model, device, val_loader, criterion)\nprint(f'val Loss: {val_loss:.4f}, val Accuracy: {val_accuracy:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:16.778896Z","iopub.execute_input":"2024-11-18T08:46:16.779156Z","iopub.status.idle":"2024-11-18T08:46:22.495497Z","shell.execute_reply.started":"2024-11-18T08:46:16.779134Z","shell.execute_reply":"2024-11-18T08:46:22.494477Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Predict the results","metadata":{}},{"cell_type":"code","source":"def predict(model, data_loader):\n    model.eval()  \n    all_predictions = []\n    \n    with torch.no_grad():\n        for data in data_loader:\n            data = data.to(device)\n            outputs = model(data) \n            _, predicted = torch.max(outputs, 1) \n            all_predictions.extend(predicted.cpu().numpy())  \n    \n    return np.array(all_predictions)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:22.498655Z","iopub.execute_input":"2024-11-18T08:46:22.498949Z","iopub.status.idle":"2024-11-18T08:46:22.504851Z","shell.execute_reply.started":"2024-11-18T08:46:22.498924Z","shell.execute_reply":"2024-11-18T08:46:22.503922Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"indices = random.sample(range(len(val_dataset)), 10)\nsamples = torch.utils.data.Subset(val_dataset, indices)\nsample_loader = DataLoader(samples, batch_size=BATCH_SIZE, shuffle=False)\n\n# Dự đoán và in kết quả\nwith torch.no_grad():\n    for data, target in sample_loader:\n        data, target = data.to(device), target.to(device)\n        output = model(data)\n        pred = output.argmax(dim=1, keepdim=True)\n\n        # In ra kết quả dự đoán\n        for i in range(len(data)):\n            plt.imshow(data[i].cpu().numpy().transpose(1, 2, 0), cmap='gray')\n            plt.title(f'Predicted: {pred[i].item()}, Actual: {target[i].item()}')\n            plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:22.505946Z","iopub.execute_input":"2024-11-18T08:46:22.506296Z","iopub.status.idle":"2024-11-18T08:46:24.406507Z","shell.execute_reply.started":"2024-11-18T08:46:22.506251Z","shell.execute_reply":"2024-11-18T08:46:24.405590Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"class TestDataset(Dataset):\n    def __init__(self, X):\n        self.X = X.reshape(-1, 28, 28).astype(np.uint8)  # Reshape hình ảnh về (28, 28)\n        self.transform = transforms.Compose([\n            transforms.ToPILImage(),\n            transforms.ToTensor(),\n            transforms.Normalize((0.1307,), (0.3081,))\n        ])\n\n    def __len__(self):\n        return len(self.X)\n\n    def __getitem__(self, idx):\n        image = self.X[idx]\n        image = self.transform(image)\n        return image\n\ndf_test = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\nX_test = df_test.values  \ntest_dataset = TestDataset(X_test)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:24.407690Z","iopub.execute_input":"2024-11-18T08:46:24.407991Z","iopub.status.idle":"2024-11-18T08:46:26.580623Z","shell.execute_reply.started":"2024-11-18T08:46:24.407965Z","shell.execute_reply":"2024-11-18T08:46:26.579797Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions = predict(model, test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:26.581638Z","iopub.execute_input":"2024-11-18T08:46:26.581923Z","iopub.status.idle":"2024-11-18T08:46:38.725373Z","shell.execute_reply.started":"2024-11-18T08:46:26.581900Z","shell.execute_reply":"2024-11-18T08:46:38.724334Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def save_predictions(predictions, output_csv_path):\n    df_predictions = pd.DataFrame({\n        'ImageId': np.arange(1, len(predictions) + 1),\n        'Label': predictions \n    })\n    df_predictions.to_csv(output_csv_path, index=False)\n    return df_predictions\n\ndf_predictions = save_predictions(predictions, 'submission.csv')\ndf_predictions.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T08:46:38.726681Z","iopub.execute_input":"2024-11-18T08:46:38.727046Z","iopub.status.idle":"2024-11-18T08:46:38.772462Z","shell.execute_reply.started":"2024-11-18T08:46:38.727016Z","shell.execute_reply":"2024-11-18T08:46:38.771539Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}